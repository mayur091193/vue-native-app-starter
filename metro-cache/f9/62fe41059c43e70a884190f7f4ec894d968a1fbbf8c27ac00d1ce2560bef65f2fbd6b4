{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"expo-constants","data":{"isAsync":false}},{"name":"pretty-format","data":{"isAsync":false}},{"name":"react-native/Libraries/Core/Devtools/parseErrorStack","data":{"isAsync":false}},{"name":"react-native/Libraries/Core/Devtools/symbolicateStackTrace","data":{"isAsync":false}},{"name":"./format/ReactNodeFormatter","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = exports.EXPO_CONSOLE_METHOD_NAME = void 0;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"expo-constants\"));\n\n  var _prettyFormat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"pretty-format\"));\n\n  var _parseErrorStack = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"react-native/Libraries/Core/Devtools/parseErrorStack\"));\n\n  var _symbolicateStackTrace = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"react-native/Libraries/Core/Devtools/symbolicateStackTrace\"));\n\n  var _ReactNodeFormatter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./format/ReactNodeFormatter\"));\n\n  var EXPO_CONSOLE_METHOD_NAME = '__expoConsoleLog';\n  exports.EXPO_CONSOLE_METHOD_NAME = EXPO_CONSOLE_METHOD_NAME;\n\n  function serializeLogDataAsync(data, level) {\n    var serializedValues, includesStack, rawStack, syntheticError, stack, errorMessage, serializedError, error, _errorMessage, _serializedError;\n\n    return _regenerator.default.async(function serializeLogDataAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            includesStack = false;\n\n            if (!_stackTraceLogsSupported()) {\n              _context.next = 32;\n              break;\n            }\n\n            if (!_isUnhandledPromiseRejection(data, level)) {\n              _context.next = 11;\n              break;\n            }\n\n            rawStack = data[0];\n            syntheticError = {\n              stack: rawStack\n            };\n            _context.next = 7;\n            return _regenerator.default.awrap(_symbolicateErrorAsync(syntheticError));\n\n          case 7:\n            stack = _context.sent;\n\n            if (!stack.length) {\n              serializedValues = _stringifyLogData(data);\n            } else {\n              errorMessage = rawStack.split('\\n')[1];\n              serializedValues = [{\n                message: \"[Unhandled promise rejection: \" + errorMessage + \"]\",\n                stack: _formatStack(stack)\n              }];\n              includesStack = true;\n            }\n\n            _context.next = 30;\n            break;\n\n          case 11:\n            if (!(data.length === 1 && data[0] instanceof Error)) {\n              _context.next = 19;\n              break;\n            }\n\n            _context.next = 14;\n            return _regenerator.default.awrap(_serializeErrorAsync(data[0]));\n\n          case 14:\n            serializedError = _context.sent;\n            serializedValues = [serializedError];\n            includesStack = serializedError.hasOwnProperty('stack');\n            _context.next = 30;\n            break;\n\n          case 19:\n            if (!(level === 'warn' || level === 'error')) {\n              _context.next = 29;\n              break;\n            }\n\n            error = _captureConsoleStackTrace();\n            _errorMessage = _stringifyLogData(data).join(', ');\n            _context.next = 24;\n            return _regenerator.default.awrap(_serializeErrorAsync(error, _errorMessage));\n\n          case 24:\n            _serializedError = _context.sent;\n            serializedValues = [_serializedError];\n            includesStack = _serializedError.hasOwnProperty('stack');\n            _context.next = 30;\n            break;\n\n          case 29:\n            serializedValues = _stringifyLogData(data);\n\n          case 30:\n            _context.next = 33;\n            break;\n\n          case 32:\n            serializedValues = _stringifyLogData(data);\n\n          case 33:\n            return _context.abrupt(\"return\", {\n              body: (0, _toConsumableArray2.default)(serializedValues),\n              includesStack: includesStack\n            });\n\n          case 34:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  function _stringifyLogData(data) {\n    return data.map(function (item) {\n      if (typeof item === 'string') {\n        return item;\n      } else {\n        var LOG_MESSAGE_MAX_LENGTH = 10000;\n        var result = (0, _prettyFormat.default)(item, {\n          plugins: [_ReactNodeFormatter.default]\n        });\n\n        if (result.length > LOG_MESSAGE_MAX_LENGTH) {\n          var truncatedResult = result.substring(0, LOG_MESSAGE_MAX_LENGTH);\n          truncatedResult += \"...(truncated to the first \" + LOG_MESSAGE_MAX_LENGTH + \" characters)\";\n          return truncatedResult;\n        } else {\n          return result;\n        }\n      }\n    });\n  }\n\n  function _serializeErrorAsync(error, message) {\n    var messageParts, firstUselessLine, stack, formattedStack;\n    return _regenerator.default.async(function _serializeErrorAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (message == null) {\n              message = error.message;\n            }\n\n            messageParts = message.split('\\n');\n            firstUselessLine = messageParts.indexOf('This error is located at:');\n\n            if (firstUselessLine > 0) {\n              message = messageParts.slice(0, firstUselessLine - 1).join('\\n');\n            }\n\n            if (!(!error.stack || !error.stack.length)) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", (0, _prettyFormat.default)(error));\n\n          case 6:\n            _context2.next = 8;\n            return _regenerator.default.awrap(_symbolicateErrorAsync(error));\n\n          case 8:\n            stack = _context2.sent;\n            formattedStack = _formatStack(stack);\n            return _context2.abrupt(\"return\", {\n              message: message,\n              stack: formattedStack\n            });\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  }\n\n  function _symbolicateErrorAsync(error) {\n    var parsedStack, symbolicatedStack;\n    return _regenerator.default.async(function _symbolicateErrorAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            parsedStack = (0, _parseErrorStack.default)(error);\n            _context3.prev = 1;\n            _context3.next = 4;\n            return _regenerator.default.awrap((0, _symbolicateStackTrace.default)(parsedStack));\n\n          case 4:\n            symbolicatedStack = _context3.sent;\n            _context3.next = 10;\n            break;\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](1);\n            return _context3.abrupt(\"return\", parsedStack);\n\n          case 10:\n            if (symbolicatedStack) {\n              _context3.next = 12;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", parsedStack);\n\n          case 12:\n            return _context3.abrupt(\"return\", symbolicatedStack.map(_removeProjectRoot));\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[1, 7]]);\n  }\n\n  function _formatStack(stack) {\n    return stack.map(function (frame) {\n      var line = frame.file + \":\" + frame.lineNumber;\n\n      if (frame.column != null) {\n        line += \":\" + frame.column;\n      }\n\n      line += \" in \" + frame.methodName;\n      return line;\n    }).join('\\n');\n  }\n\n  function _removeProjectRoot(frame) {\n    var filename = frame.file;\n\n    if (filename == null) {\n      return frame;\n    }\n\n    var projectRoot = _getProjectRoot();\n\n    if (projectRoot == null) {\n      return frame;\n    }\n\n    if (filename.startsWith(projectRoot)) {\n      filename = filename.substring(projectRoot.length);\n\n      if (filename[0] === '/' || filename[0] === '\\\\') {\n        filename = filename.substring(1);\n      }\n\n      frame.file = filename;\n    }\n\n    return frame;\n  }\n\n  function _stackTraceLogsSupported() {\n    return !!(__DEV__ && _getProjectRoot());\n  }\n\n  function _isUnhandledPromiseRejection(data, level) {\n    return level === 'warn' && typeof data[0] === 'string' && /^Possible Unhandled Promise Rejection/.test(data[0]);\n  }\n\n  function _captureConsoleStackTrace() {\n    try {\n      throw new Error();\n    } catch (error) {\n      var stackLines = error.stack.split('\\n');\n      var consoleMethodIndex = stackLines.findIndex(function (frame) {\n        return frame.includes(EXPO_CONSOLE_METHOD_NAME);\n      });\n\n      if (consoleMethodIndex !== -1) {\n        stackLines = stackLines.slice(consoleMethodIndex + 1);\n        error.stack = stackLines.join('\\n');\n      }\n\n      return error;\n    }\n  }\n\n  function _getProjectRoot() {\n    return _expoConstants.default.manifest && _expoConstants.default.manifest.developer ? _expoConstants.default.manifest.developer.projectRoot : null;\n  }\n\n  var _default = {\n    serializeLogDataAsync: serializeLogDataAsync\n  };\n  exports.default = _default;\n});","map":[[13,0,1,0],[15,0,2,0],[17,0,3,0],[19,0,4,0],[21,0,5,0],[23,0,6,7],[23,6,6,13,"EXPO_CONSOLE_METHOD_NAME"],[23,30,6,37],[23,33,6,40],[23,51,6,7],[26,0,7,0],[26,11,7,15,"serializeLogDataAsync"],[26,32,7,0],[26,33,7,37,"data"],[26,37,7,0],[26,39,7,43,"level"],[26,44,7,0],[27,0,7,0],[29,0,7,0],[30,0,7,0],[31,0,7,0],[32,0,7,0],[33,0,9,8,"includesStack"],[33,12,9,8,"includesStack"],[33,25,7,0],[33,28,9,24],[33,33,7,0],[35,0,7,0],[35,17,10,8,"_stackTraceLogsSupported"],[35,41,10,32],[35,43,7,0],[36,0,7,0],[37,0,7,0],[38,0,7,0],[40,0,7,0],[40,17,11,12,"_isUnhandledPromiseRejection"],[40,45,11,40],[40,46,11,41,"data"],[40,50,11,40],[40,52,11,47,"level"],[40,57,11,40],[40,58,7,0],[41,0,7,0],[42,0,7,0],[43,0,7,0],[45,0,12,16,"rawStack"],[45,12,12,16,"rawStack"],[45,20,7,0],[45,23,12,27,"data"],[45,27,12,31],[45,28,12,32],[45,29,12,31],[45,30,7,0],[46,0,13,16,"syntheticError"],[46,12,13,16,"syntheticError"],[46,26,7,0],[46,29,13,33],[47,0,13,35,"stack"],[47,14,13,35,"stack"],[47,19,13,40],[47,21,13,42,"rawStack"],[48,0,13,33],[48,13,7,0],[49,0,7,0],[50,0,7,0],[50,46,14,30,"_symbolicateErrorAsync"],[50,68,14,52],[50,69,14,53,"syntheticError"],[50,83,14,52],[50,84,7,0],[52,0,7,0],[53,0,14,16,"stack"],[53,12,14,16,"stack"],[53,17,7,0],[55,0,15,12],[55,16,15,16],[55,17,15,17,"stack"],[55,22,15,22],[55,23,15,23,"length"],[55,29,15,12],[55,31,15,31],[56,0,16,16,"serializedValues"],[56,14,16,16,"serializedValues"],[56,30,16,32],[56,33,16,35,"_stringifyLogData"],[56,50,16,52],[56,51,16,53,"data"],[56,55,16,52],[56,56,16,16],[57,0,17,13],[57,13,15,12],[57,19,18,17],[58,0,20,20,"errorMessage"],[58,14,20,20,"errorMessage"],[58,26,18,17],[58,29,20,35,"rawStack"],[58,37,20,43],[58,38,20,44,"split"],[58,43,20,35],[58,44,20,50],[58,48,20,35],[58,50,20,56],[58,51,20,35],[58,52,18,17],[59,0,21,16,"serializedValues"],[59,14,21,16,"serializedValues"],[59,30,21,32],[59,33,21,35],[59,34,22,20],[60,0,23,24,"message"],[60,16,23,24,"message"],[60,23,23,31],[60,60,23,66,"errorMessage"],[60,72,23,31],[60,78,22,20],[61,0,24,24,"stack"],[61,16,24,24,"stack"],[61,21,24,29],[61,23,24,31,"_formatStack"],[61,35,24,43],[61,36,24,44,"stack"],[61,41,24,43],[62,0,22,20],[62,15,21,35],[62,16,21,16],[63,0,27,16,"includesStack"],[63,14,27,16,"includesStack"],[63,27,27,29],[63,30,27,32],[63,34,27,16],[64,0,28,13],[66,0,7,0],[67,0,7,0],[69,0,7,0],[70,0,7,0],[70,18,30,17,"data"],[70,22,30,21],[70,23,30,22,"length"],[70,29,30,17],[70,34,30,33],[70,35,30,17],[70,39,30,38,"data"],[70,43,30,42],[70,44,30,43],[70,45,30,42],[70,46,30,38],[70,58,30,57,"Error"],[70,63,7,0],[71,0,7,0],[72,0,7,0],[73,0,7,0],[75,0,7,0],[76,0,7,0],[76,46,34,40,"_serializeErrorAsync"],[76,66,34,60],[76,67,34,61,"data"],[76,71,34,65],[76,72,34,66],[76,73,34,65],[76,74,34,60],[76,75,7,0],[78,0,7,0],[79,0,34,16,"serializedError"],[79,12,34,16,"serializedError"],[79,27,7,0],[80,0,35,12,"serializedValues"],[80,12,35,12,"serializedValues"],[80,28,35,28],[80,31,35,31],[80,32,35,32,"serializedError"],[80,47,35,31],[80,48,35,12],[81,0,36,12,"includesStack"],[81,12,36,12,"includesStack"],[81,25,36,25],[81,28,36,28,"serializedError"],[81,43,36,43],[81,44,36,44,"hasOwnProperty"],[81,58,36,28],[81,59,36,59],[81,66,36,28],[81,67,36,12],[82,0,7,0],[83,0,7,0],[85,0,7,0],[86,0,7,0],[86,18,38,17,"level"],[86,23,38,22],[86,28,38,27],[86,34,38,17],[86,38,38,37,"level"],[86,43,38,42],[86,48,38,47],[86,55,7,0],[87,0,7,0],[88,0,7,0],[89,0,7,0],[91,0,41,16,"error"],[91,12,41,16,"error"],[91,17,7,0],[91,20,41,24,"_captureConsoleStackTrace"],[91,45,41,49],[91,47,7,0],[92,0,43,16,"errorMessage"],[92,12,43,16,"errorMessage"],[92,25,7,0],[92,28,43,31,"_stringifyLogData"],[92,45,43,48],[92,46,43,49,"data"],[92,50,43,48],[92,51,43,31],[92,52,43,55,"join"],[92,56,43,31],[92,57,43,60],[92,61,43,31],[92,62,7,0],[93,0,7,0],[94,0,7,0],[94,46,44,40,"_serializeErrorAsync"],[94,66,44,60],[94,67,44,61,"error"],[94,72,44,60],[94,74,44,68,"errorMessage"],[94,87,44,60],[94,88,7,0],[96,0,7,0],[97,0,44,16,"serializedError"],[97,12,44,16,"serializedError"],[97,28,7,0],[98,0,45,12,"serializedValues"],[98,12,45,12,"serializedValues"],[98,28,45,28],[98,31,45,31],[98,32,45,32,"serializedError"],[98,48,45,31],[98,49,45,12],[99,0,46,12,"includesStack"],[99,12,46,12,"includesStack"],[99,25,46,25],[99,28,46,28,"serializedError"],[99,44,46,43],[99,45,46,44,"hasOwnProperty"],[99,59,46,28],[99,60,46,59],[99,67,46,28],[99,68,46,12],[100,0,7,0],[101,0,7,0],[103,0,7,0],[104,0,49,12,"serializedValues"],[104,12,49,12,"serializedValues"],[104,28,49,28],[104,31,49,31,"_stringifyLogData"],[104,48,49,48],[104,49,49,49,"data"],[104,53,49,48],[104,54,49,12],[106,0,7,0],[107,0,7,0],[108,0,7,0],[110,0,7,0],[111,0,53,8,"serializedValues"],[111,12,53,8,"serializedValues"],[111,28,53,24],[111,31,53,27,"_stringifyLogData"],[111,48,53,44],[111,49,53,45,"data"],[111,53,53,44],[111,54,53,8],[113,0,7,0],[114,0,7,0],[114,45,55,11],[115,0,56,8,"body"],[115,14,56,8,"body"],[115,18,56,12],[115,53,56,18,"serializedValues"],[115,69,56,12],[115,70,55,11],[116,0,57,8,"includesStack"],[116,14,57,8,"includesStack"],[116,27,57,21],[116,29,57,8,"includesStack"],[117,0,55,11],[117,13,7,0],[119,0,7,0],[120,0,7,0],[121,0,7,0],[122,0,7,0],[123,0,7,0],[124,0,7,0],[125,0,7,0],[127,0,60,0],[127,11,60,9,"_stringifyLogData"],[127,28,60,0],[127,29,60,27,"data"],[127,33,60,0],[127,35,60,33],[128,0,61,4],[128,11,61,11,"data"],[128,15,61,15],[128,16,61,16,"map"],[128,19,61,11],[128,20,61,20],[128,30,61,20,"item"],[128,34,61,24],[128,36,61,28],[129,0,62,8],[129,10,62,12],[129,17,62,19,"item"],[129,21,62,12],[129,26,62,28],[129,34,62,8],[129,36,62,38],[130,0,63,12],[130,15,63,19,"item"],[130,19,63,12],[131,0,64,9],[131,7,62,8],[131,13,65,13],[132,0,67,12],[132,12,67,18,"LOG_MESSAGE_MAX_LENGTH"],[132,34,67,40],[132,37,67,43],[132,42,67,12],[133,0,68,12],[133,12,68,16,"result"],[133,18,68,22],[133,21,68,25],[133,48,68,38,"item"],[133,52,68,25],[133,54,68,44],[134,0,68,46,"plugins"],[134,10,68,46,"plugins"],[134,17,68,53],[134,19,68,55],[134,20,68,56,"ReactNodeFormatter"],[134,47,68,55],[135,0,68,44],[135,9,68,25],[135,10,68,12],[137,0,70,12],[137,12,70,16,"result"],[137,18,70,22],[137,19,70,23,"length"],[137,25,70,16],[137,28,70,32,"LOG_MESSAGE_MAX_LENGTH"],[137,50,70,12],[137,52,70,56],[138,0,71,16],[138,14,71,20,"truncatedResult"],[138,29,71,35],[138,32,71,38,"result"],[138,38,71,44],[138,39,71,45,"substring"],[138,48,71,38],[138,49,71,55],[138,50,71,38],[138,52,71,58,"LOG_MESSAGE_MAX_LENGTH"],[138,74,71,38],[138,75,71,16],[139,0,73,16,"truncatedResult"],[139,10,73,16,"truncatedResult"],[139,25,73,31],[139,61,73,65,"LOG_MESSAGE_MAX_LENGTH"],[139,83,73,31],[139,100,73,16],[140,0,74,16],[140,17,74,23,"truncatedResult"],[140,32,74,16],[141,0,75,13],[141,9,70,12],[141,15,76,17],[142,0,77,16],[142,17,77,23,"result"],[142,23,77,16],[143,0,78,13],[144,0,79,9],[145,0,80,5],[145,5,61,11],[145,6,61,4],[146,0,81,1],[148,0,82,0],[148,11,82,15,"_serializeErrorAsync"],[148,31,82,0],[148,32,82,36,"error"],[148,37,82,0],[148,39,82,43,"message"],[148,46,82,0],[149,0,82,0],[150,0,82,0],[151,0,82,0],[152,0,82,0],[153,0,82,0],[154,0,83,4],[154,16,83,8,"message"],[154,23,83,15],[154,27,83,19],[154,31,83,4],[154,33,83,25],[155,0,84,8,"message"],[155,14,84,8,"message"],[155,21,84,15],[155,24,84,18,"error"],[155,29,84,23],[155,30,84,24,"message"],[155,37,84,8],[156,0,85,5],[158,0,89,8,"messageParts"],[158,12,89,8,"messageParts"],[158,24,82,0],[158,27,89,23,"message"],[158,34,89,30],[158,35,89,31,"split"],[158,40,89,23],[158,41,89,37],[158,45,89,23],[158,46,82,0],[159,0,90,8,"firstUselessLine"],[159,12,90,8,"firstUselessLine"],[159,28,82,0],[159,31,90,27,"messageParts"],[159,43,90,39],[159,44,90,40,"indexOf"],[159,51,90,27],[159,52,90,48],[159,79,90,27],[159,80,82,0],[161,0,91,4],[161,16,91,8,"firstUselessLine"],[161,32,91,24],[161,35,91,27],[161,36,91,4],[161,38,91,30],[162,0,92,8,"message"],[162,14,92,8,"message"],[162,21,92,15],[162,24,92,18,"messageParts"],[162,36,92,30],[162,37,92,31,"slice"],[162,42,92,18],[162,43,92,37],[162,44,92,18],[162,46,92,40,"firstUselessLine"],[162,62,92,56],[162,65,92,59],[162,66,92,18],[162,68,92,62,"join"],[162,72,92,18],[162,73,92,67],[162,77,92,18],[162,78,92,8],[163,0,93,5],[165,0,82,0],[165,18,94,8],[165,19,94,9,"error"],[165,24,94,14],[165,25,94,15,"stack"],[165,30,94,8],[165,34,94,24],[165,35,94,25,"error"],[165,40,94,30],[165,41,94,31,"stack"],[165,46,94,25],[165,47,94,37,"length"],[165,53,82,0],[166,0,82,0],[167,0,82,0],[168,0,82,0],[170,0,82,0],[170,46,95,15],[170,73,95,28,"error"],[170,78,95,15],[170,79,82,0],[172,0,82,0],[173,0,82,0],[174,0,82,0],[174,46,97,22,"_symbolicateErrorAsync"],[174,68,97,44],[174,69,97,45,"error"],[174,74,97,44],[174,75,82,0],[176,0,82,0],[177,0,97,8,"stack"],[177,12,97,8,"stack"],[177,17,82,0],[178,0,98,8,"formattedStack"],[178,12,98,8,"formattedStack"],[178,26,82,0],[178,29,98,25,"_formatStack"],[178,41,98,37],[178,42,98,38,"stack"],[178,47,98,37],[178,48,82,0],[179,0,82,0],[179,46,99,11],[180,0,99,13,"message"],[180,14,99,13,"message"],[180,21,99,20],[180,23,99,13,"message"],[180,30,99,11],[181,0,99,22,"stack"],[181,14,99,22,"stack"],[181,19,99,27],[181,21,99,29,"formattedStack"],[182,0,99,11],[182,13,82,0],[184,0,82,0],[185,0,82,0],[186,0,82,0],[187,0,82,0],[188,0,82,0],[189,0,82,0],[190,0,82,0],[192,0,101,0],[192,11,101,15,"_symbolicateErrorAsync"],[192,33,101,0],[192,34,101,38,"error"],[192,39,101,0],[193,0,101,0],[194,0,101,0],[195,0,101,0],[196,0,101,0],[197,0,101,0],[198,0,102,8,"parsedStack"],[198,12,102,8,"parsedStack"],[198,23,101,0],[198,26,102,22],[198,56,102,38,"error"],[198,61,102,22],[198,62,101,0],[199,0,101,0],[200,0,101,0],[201,0,101,0],[201,46,105,34],[201,82,105,56,"parsedStack"],[201,93,105,34],[201,94,101,0],[203,0,101,0],[204,0,105,8,"symbolicatedStack"],[204,12,105,8,"symbolicatedStack"],[204,29,101,0],[205,0,101,0],[206,0,101,0],[208,0,101,0],[209,0,101,0],[210,0,101,0],[211,0,101,0],[211,46,108,15,"parsedStack"],[211,57,101,0],[213,0,101,0],[214,0,101,0],[214,16,111,9,"symbolicatedStack"],[214,33,101,0],[215,0,101,0],[216,0,101,0],[217,0,101,0],[219,0,101,0],[219,46,112,15,"parsedStack"],[219,57,101,0],[221,0,101,0],[222,0,101,0],[222,46,115,11,"symbolicatedStack"],[222,63,115,28],[222,64,115,29,"map"],[222,67,115,11],[222,68,115,33,"_removeProjectRoot"],[222,86,115,11],[222,87,101,0],[224,0,101,0],[225,0,101,0],[226,0,101,0],[227,0,101,0],[228,0,101,0],[229,0,101,0],[230,0,101,0],[232,0,117,0],[232,11,117,9,"_formatStack"],[232,23,117,0],[232,24,117,22,"stack"],[232,29,117,0],[232,31,117,29],[233,0,118,4],[233,11,118,11,"stack"],[233,16,118,16],[233,17,119,9,"map"],[233,20,118,11],[233,21,119,13],[233,31,119,13,"frame"],[233,36,119,18],[233,38,119,22],[234,0,120,8],[234,10,120,12,"line"],[234,14,120,16],[234,17,120,22,"frame"],[234,22,120,27],[234,23,120,28,"file"],[234,27,120,16],[234,36,120,36,"frame"],[234,41,120,41],[234,42,120,42,"lineNumber"],[234,52,120,8],[236,0,121,8],[236,10,121,12,"frame"],[236,15,121,17],[236,16,121,18,"column"],[236,22,121,12],[236,26,121,28],[236,30,121,8],[236,32,121,34],[237,0,122,12,"line"],[237,8,122,12,"line"],[237,12,122,16],[237,22,122,24,"frame"],[237,27,122,29],[237,28,122,30,"column"],[237,34,122,12],[238,0,123,9],[240,0,124,8,"line"],[240,6,124,8,"line"],[240,10,124,12],[240,23,124,23,"frame"],[240,28,124,28],[240,29,124,29,"methodName"],[240,39,124,8],[241,0,125,8],[241,13,125,15,"line"],[241,17,125,8],[242,0,126,5],[242,5,118,11],[242,7,127,9,"join"],[242,11,118,11],[242,12,127,14],[242,16,118,11],[242,17,118,4],[243,0,128,1],[245,0,129,0],[245,11,129,9,"_removeProjectRoot"],[245,29,129,0],[245,30,129,28,"frame"],[245,35,129,0],[245,37,129,35],[246,0,130,4],[246,8,130,8,"filename"],[246,16,130,16],[246,19,130,19,"frame"],[246,24,130,24],[246,25,130,25,"file"],[246,29,130,4],[248,0,131,4],[248,8,131,8,"filename"],[248,16,131,16],[248,20,131,20],[248,24,131,4],[248,26,131,26],[249,0,132,8],[249,13,132,15,"frame"],[249,18,132,8],[250,0,133,5],[252,0,134,4],[252,8,134,8,"projectRoot"],[252,19,134,19],[252,22,134,22,"_getProjectRoot"],[252,37,134,37],[252,39,134,4],[254,0,135,4],[254,8,135,8,"projectRoot"],[254,19,135,19],[254,23,135,23],[254,27,135,4],[254,29,135,29],[255,0,136,8],[255,13,136,15,"frame"],[255,18,136,8],[256,0,137,5],[258,0,138,4],[258,8,138,8,"filename"],[258,16,138,16],[258,17,138,17,"startsWith"],[258,27,138,8],[258,28,138,28,"projectRoot"],[258,39,138,8],[258,40,138,4],[258,42,138,42],[259,0,139,8,"filename"],[259,6,139,8,"filename"],[259,14,139,16],[259,17,139,19,"filename"],[259,25,139,27],[259,26,139,28,"substring"],[259,35,139,19],[259,36,139,38,"projectRoot"],[259,47,139,49],[259,48,139,50,"length"],[259,54,139,19],[259,55,139,8],[261,0,140,8],[261,10,140,12,"filename"],[261,18,140,20],[261,19,140,21],[261,20,140,20],[261,21,140,12],[261,26,140,28],[261,29,140,12],[261,33,140,35,"filename"],[261,41,140,43],[261,42,140,44],[261,43,140,43],[261,44,140,35],[261,49,140,51],[261,53,140,8],[261,55,140,57],[262,0,141,12,"filename"],[262,8,141,12,"filename"],[262,16,141,20],[262,19,141,23,"filename"],[262,27,141,31],[262,28,141,32,"substring"],[262,37,141,23],[262,38,141,42],[262,39,141,23],[262,40,141,12],[263,0,142,9],[265,0,143,8,"frame"],[265,6,143,8,"frame"],[265,11,143,13],[265,12,143,14,"file"],[265,16,143,8],[265,19,143,21,"filename"],[265,27,143,8],[266,0,144,5],[268,0,145,4],[268,11,145,11,"frame"],[268,16,145,4],[269,0,146,1],[271,0,156,0],[271,11,156,9,"_stackTraceLogsSupported"],[271,35,156,0],[271,38,156,36],[272,0,157,4],[272,11,157,11],[272,12,157,12],[272,14,157,14,"__DEV__"],[272,21,157,21],[272,25,157,25,"_getProjectRoot"],[272,40,157,40],[272,42,157,12],[272,43,157,4],[273,0,158,1],[275,0,159,0],[275,11,159,9,"_isUnhandledPromiseRejection"],[275,39,159,0],[275,40,159,38,"data"],[275,44,159,0],[275,46,159,44,"level"],[275,51,159,0],[275,53,159,51],[276,0,160,4],[276,11,160,12,"level"],[276,16,160,17],[276,21,160,22],[276,27,160,12],[276,31,161,8],[276,38,161,15,"data"],[276,42,161,19],[276,43,161,20],[276,44,161,19],[276,45,161,8],[276,50,161,27],[276,58,160,12],[276,62,162,8],[276,102,162,48,"test"],[276,106,162,8],[276,107,162,53,"data"],[276,111,162,57],[276,112,162,58],[276,113,162,57],[276,114,162,8],[276,115,160,4],[277,0,163,1],[279,0,164,0],[279,11,164,9,"_captureConsoleStackTrace"],[279,36,164,0],[279,39,164,37],[280,0,165,4],[280,8,165,8],[281,0,166,8],[281,12,166,14],[281,16,166,18,"Error"],[281,21,166,14],[281,23,166,8],[282,0,167,5],[282,5,165,4],[282,6,168,4],[282,13,168,11,"error"],[282,18,168,4],[282,20,168,18],[283,0,169,8],[283,10,169,12,"stackLines"],[283,20,169,22],[283,23,169,25,"error"],[283,28,169,30],[283,29,169,31,"stack"],[283,34,169,25],[283,35,169,37,"split"],[283,40,169,25],[283,41,169,43],[283,45,169,25],[283,46,169,8],[284,0,170,8],[284,10,170,12,"consoleMethodIndex"],[284,28,170,30],[284,31,170,33,"stackLines"],[284,41,170,43],[284,42,170,44,"findIndex"],[284,51,170,33],[284,52,170,54],[284,62,170,54,"frame"],[284,67,170,59],[285,0,170,59],[285,15,170,63,"frame"],[285,20,170,68],[285,21,170,69,"includes"],[285,29,170,63],[285,30,170,78,"EXPO_CONSOLE_METHOD_NAME"],[285,54,170,63],[285,55,170,59],[286,0,170,59],[286,7,170,33],[286,8,170,8],[288,0,171,8],[288,10,171,12,"consoleMethodIndex"],[288,28,171,30],[288,33,171,35],[288,34,171,36],[288,35,171,8],[288,37,171,39],[289,0,172,12,"stackLines"],[289,8,172,12,"stackLines"],[289,18,172,22],[289,21,172,25,"stackLines"],[289,31,172,35],[289,32,172,36,"slice"],[289,37,172,25],[289,38,172,42,"consoleMethodIndex"],[289,56,172,60],[289,59,172,63],[289,60,172,25],[289,61,172,12],[290,0,173,12,"error"],[290,8,173,12,"error"],[290,13,173,17],[290,14,173,18,"stack"],[290,19,173,12],[290,22,173,26,"stackLines"],[290,32,173,36],[290,33,173,37,"join"],[290,37,173,26],[290,38,173,42],[290,42,173,26],[290,43,173,12],[291,0,174,9],[293,0,175,8],[293,13,175,15,"error"],[293,18,175,8],[294,0,176,5],[295,0,177,1],[297,0,178,0],[297,11,178,9,"_getProjectRoot"],[297,26,178,0],[297,29,178,27],[298,0,179,4],[298,11,179,11,"Constants"],[298,34,179,21,"manifest"],[298,42,179,11],[298,46,179,33,"Constants"],[298,69,179,43,"manifest"],[298,77,179,33],[298,78,179,52,"developer"],[298,87,179,11],[298,90,180,10,"Constants"],[298,113,180,20,"manifest"],[298,121,180,10],[298,122,180,29,"developer"],[298,131,180,10],[298,132,180,39,"projectRoot"],[298,143,179,11],[298,146,181,10],[298,150,179,4],[299,0,182,1],[301,17,183,15],[302,0,184,4,"serializeLogDataAsync"],[302,4,184,4,"serializeLogDataAsync"],[302,25,184,25],[302,27,184,4,"serializeLogDataAsync"],[303,0,183,15],[303,3]]},"type":"js/module"}]}