{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"./AnimatedNode","data":{"isAsync":false}},{"name":"fbjs/lib/areEqual","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createOrReuseTransformNode = createOrReuseTransformNode;\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/getPrototypeOf\"));\n\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/inherits\"));\n\n  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./AnimatedNode\"));\n\n  var _areEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"fbjs/lib/areEqual\"));\n\n  function sanitizeTransform(inputTransform) {\n    var outputTransform = [];\n    inputTransform.forEach(function (transform) {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof _AnimatedNode2.default) {\n          outputTransform.push({\n            property: key,\n            nodeID: value.__nodeID\n          });\n        } else {\n          outputTransform.push({\n            property: key,\n            value: value\n          });\n        }\n      }\n    });\n    return outputTransform;\n  }\n\n  function extractAnimatedParentNodes(transform) {\n    var parents = [];\n    transform.forEach(function (transform) {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof _AnimatedNode2.default) {\n          parents.push(value);\n        }\n      }\n    });\n    return parents;\n  }\n\n  function createOrReuseTransformNode(transform, oldNode) {\n    var config = sanitizeTransform(transform);\n\n    if (oldNode && (0, _areEqual.default)(config, oldNode._config)) {\n      return oldNode;\n    }\n\n    return new AnimatedTransform(transform, config);\n  }\n\n  var AnimatedTransform = function (_AnimatedNode) {\n    (0, _inherits2.default)(AnimatedTransform, _AnimatedNode);\n\n    function AnimatedTransform(transform, config) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, AnimatedTransform);\n      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedTransform).call(this, {\n        type: 'transform',\n        transform: config\n      }, extractAnimatedParentNodes(transform)));\n      _this._config = config;\n      _this._transform = transform;\n      return _this;\n    }\n\n    (0, _createClass2.default)(AnimatedTransform, [{\n      key: \"toString\",\n      value: function toString() {\n        return \"AnimatedTransform, id: \" + this.__nodeID;\n      }\n    }, {\n      key: \"__onEvaluate\",\n      value: function __onEvaluate() {\n        return this._transform.map(function (transform) {\n          var result = {};\n\n          for (var key in transform) {\n            var value = transform[key];\n\n            if (value instanceof _AnimatedNode2.default) {\n              result[key] = value.__getValue();\n            }\n          }\n\n          return result;\n        });\n      }\n    }]);\n    return AnimatedTransform;\n  }(_AnimatedNode2.default);\n});","map":[[19,0,1,0],[21,0,3,0],[23,0,5,0],[23,11,5,9,"sanitizeTransform"],[23,28,5,0],[23,29,5,27,"inputTransform"],[23,43,5,0],[23,45,5,43],[24,0,6,2],[24,8,6,8,"outputTransform"],[24,23,6,23],[24,26,6,26],[24,28,6,2],[25,0,7,2,"inputTransform"],[25,4,7,2,"inputTransform"],[25,18,7,16],[25,19,7,17,"forEach"],[25,26,7,2],[25,27,7,25],[25,37,7,25,"transform"],[25,46,7,34],[25,48,7,38],[26,0,8,4],[26,11,8,9],[26,15,8,15,"key"],[26,18,8,4],[26,22,8,22,"transform"],[26,31,8,4],[26,33,8,33],[27,0,9,6],[27,12,9,12,"value"],[27,17,9,17],[27,20,9,20,"transform"],[27,29,9,29],[27,30,9,30,"key"],[27,33,9,29],[27,34,9,6],[29,0,10,6],[29,12,10,10,"value"],[29,17,10,15],[29,29,10,27,"AnimatedNode"],[29,51,10,6],[29,53,10,41],[30,0,11,8,"outputTransform"],[30,10,11,8,"outputTransform"],[30,25,11,23],[30,26,11,24,"push"],[30,30,11,8],[30,31,11,29],[31,0,12,10,"property"],[31,12,12,10,"property"],[31,20,12,18],[31,22,12,20,"key"],[31,25,11,29],[32,0,13,10,"nodeID"],[32,12,13,10,"nodeID"],[32,18,13,16],[32,20,13,18,"value"],[32,25,13,23],[32,26,13,24,"__nodeID"],[33,0,11,29],[33,11,11,8],[34,0,15,7],[34,9,10,6],[34,15,15,13],[35,0,16,8,"outputTransform"],[35,10,16,8,"outputTransform"],[35,25,16,23],[35,26,16,24,"push"],[35,30,16,8],[35,31,16,29],[36,0,17,10,"property"],[36,12,17,10,"property"],[36,20,17,18],[36,22,17,20,"key"],[36,25,16,29],[37,0,18,10,"value"],[37,12,18,10,"value"],[37,17,18,15],[37,19,18,10,"value"],[38,0,16,29],[38,11,16,8],[39,0,20,7],[40,0,21,5],[41,0,22,3],[41,5,7,2],[42,0,23,2],[42,11,23,9,"outputTransform"],[42,26,23,2],[43,0,24,1],[45,0,26,0],[45,11,26,9,"extractAnimatedParentNodes"],[45,37,26,0],[45,38,26,36,"transform"],[45,47,26,0],[45,49,26,47],[46,0,27,2],[46,8,27,8,"parents"],[46,15,27,15],[46,18,27,18],[46,20,27,2],[47,0,28,2,"transform"],[47,4,28,2,"transform"],[47,13,28,11],[47,14,28,12,"forEach"],[47,21,28,2],[47,22,28,20],[47,32,28,20,"transform"],[47,41,28,29],[47,43,28,33],[48,0,29,4],[48,11,29,9],[48,15,29,15,"key"],[48,18,29,4],[48,22,29,22,"transform"],[48,31,29,4],[48,33,29,33],[49,0,30,6],[49,12,30,12,"value"],[49,17,30,17],[49,20,30,20,"transform"],[49,29,30,29],[49,30,30,30,"key"],[49,33,30,29],[49,34,30,6],[51,0,31,6],[51,12,31,10,"value"],[51,17,31,15],[51,29,31,27,"AnimatedNode"],[51,51,31,6],[51,53,31,41],[52,0,32,8,"parents"],[52,10,32,8,"parents"],[52,17,32,15],[52,18,32,16,"push"],[52,22,32,8],[52,23,32,21,"value"],[52,28,32,8],[53,0,33,7],[54,0,34,5],[55,0,35,3],[55,5,28,2],[56,0,36,2],[56,11,36,9,"parents"],[56,18,36,2],[57,0,37,1],[59,0,39,7],[59,11,39,16,"createOrReuseTransformNode"],[59,37,39,7],[59,38,39,43,"transform"],[59,47,39,7],[59,49,39,54,"oldNode"],[59,56,39,7],[59,58,39,63],[60,0,40,2],[60,8,40,8,"config"],[60,14,40,14],[60,17,40,17,"sanitizeTransform"],[60,34,40,34],[60,35,40,35,"transform"],[60,44,40,34],[60,45,40,2],[62,0,41,2],[62,8,41,6,"oldNode"],[62,15,41,13],[62,19,41,17],[62,42,41,27,"config"],[62,48,41,17],[62,50,41,35,"oldNode"],[62,57,41,42],[62,58,41,43,"_config"],[62,65,41,17],[62,66,41,2],[62,68,41,53],[63,0,42,4],[63,13,42,11,"oldNode"],[63,20,42,4],[64,0,43,3],[66,0,44,2],[66,11,44,9],[66,15,44,13,"AnimatedTransform"],[66,32,44,9],[66,33,44,31,"transform"],[66,42,44,9],[66,44,44,42,"config"],[66,50,44,9],[66,51,44,2],[67,0,45,1],[69,6,47,6,"AnimatedTransform"],[69,23],[72,0,48,2],[72,31,48,14,"transform"],[72,40,48,2],[72,42,48,25,"config"],[72,48,48,2],[72,50,48,33],[73,0,48,33],[75,0,48,33],[76,0,49,4],[76,121,50,6],[77,0,50,8,"type"],[77,8,50,8,"type"],[77,12,50,12],[77,14,50,14],[77,25,50,6],[78,0,50,27,"transform"],[78,8,50,27,"transform"],[78,17,50,36],[78,19,50,38,"config"],[79,0,50,6],[79,7,49,4],[79,9,51,6,"extractAnimatedParentNodes"],[79,35,51,32],[79,36,51,33,"transform"],[79,45,51,32],[79,46,49,4],[80,0,53,4],[80,12,53,9,"_config"],[80,19,53,4],[80,22,53,19,"config"],[80,28,53,4],[81,0,54,4],[81,12,54,9,"_transform"],[81,22,54,4],[81,25,54,22,"transform"],[81,34,54,4],[82,0,48,33],[83,0,55,3],[87,33,57,13],[88,0,58,4],[88,43,58,37],[88,48,58,42,"__nodeID"],[88,56,58,4],[89,0,59,3],[92,37,61,17],[93,0,62,4],[93,15,62,11],[93,20,62,16,"_transform"],[93,30,62,11],[93,31,62,27,"map"],[93,34,62,11],[93,35,62,31],[93,45,62,31,"transform"],[93,54,62,40],[93,56,62,44],[94,0,63,6],[94,14,63,12,"result"],[94,20,63,18],[94,23,63,21],[94,25,63,6],[96,0,64,6],[96,15,64,11],[96,19,64,17,"key"],[96,22,64,6],[96,26,64,24,"transform"],[96,35,64,6],[96,37,64,35],[97,0,65,8],[97,16,65,14,"value"],[97,21,65,19],[97,24,65,22,"transform"],[97,33,65,31],[97,34,65,32,"key"],[97,37,65,31],[97,38,65,8],[99,0,66,8],[99,16,66,12,"value"],[99,21,66,17],[99,33,66,29,"AnimatedNode"],[99,55,66,8],[99,57,66,43],[100,0,67,10,"result"],[100,14,67,10,"result"],[100,20,67,16],[100,21,67,17,"key"],[100,24,67,16],[100,25,67,10],[100,28,67,24,"value"],[100,33,67,29],[100,34,67,30,"__getValue"],[100,44,67,24],[100,46,67,10],[101,0,68,9],[102,0,69,7],[104,0,70,6],[104,17,70,13,"result"],[104,23,70,6],[105,0,71,5],[105,9,62,11],[105,10,62,4],[106,0,72,3],[109,4,47,32,"AnimatedNode"],[109,26]]},"type":"js/module"}]}