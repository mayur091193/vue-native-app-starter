{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"../operators","data":{"isAsync":false}},{"name":"fbjs/lib/invariant","data":{"isAsync":false}},{"name":"../core/AnimatedNode","data":{"isAsync":false}},{"name":"../core/AnimatedCond","data":{"isAsync":false}},{"name":"../core/AnimatedFunction","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = interpolate;\n  exports.Extrapolate = void 0;\n\n  var _operators = _$$_REQUIRE(_dependencyMap[1], \"../operators\");\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"fbjs/lib/invariant\"));\n\n  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"../core/AnimatedNode\"));\n\n  var _AnimatedCond = _$$_REQUIRE(_dependencyMap[4], \"../core/AnimatedCond\");\n\n  var _AnimatedFunction = _$$_REQUIRE(_dependencyMap[5], \"../core/AnimatedFunction\");\n\n  var interpolateInternalSingleProc = (0, _AnimatedFunction.createAnimatedFunction)(function (value, inS, inE, outS, outE) {\n    var progress = (0, _operators.divide)((0, _operators.sub)(value, inS), (0, _operators.sub)(inE, inS));\n    var resultForNonZeroRange = (0, _operators.add)(outS, (0, _operators.multiply)(progress, (0, _operators.sub)(outE, outS)));\n    var result = (0, _AnimatedCond.createAnimatedCond)((0, _operators.eq)(inS, inE), (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessOrEq)(value, inS), outS, outE), resultForNonZeroRange);\n    return result;\n  });\n\n  function interpolateInternalSingle(value, inputRange, outputRange, offset) {\n    var inS = inputRange[offset];\n    var inE = inputRange[offset + 1];\n    var outS = outputRange[offset];\n    var outE = outputRange[offset + 1];\n    return interpolateInternalSingleProc(value, inS, inE, outS, outE);\n  }\n\n  function interpolateInternal(value, inputRange, outputRange) {\n    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    if (inputRange.length - offset === 2) {\n      return interpolateInternalSingle(value, inputRange, outputRange, offset);\n    }\n\n    return (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[offset + 1]), interpolateInternalSingle(value, inputRange, outputRange, offset), interpolateInternal(value, inputRange, outputRange, offset + 1));\n  }\n\n  var Extrapolate = {\n    EXTEND: 'extend',\n    CLAMP: 'clamp',\n    IDENTITY: 'identity'\n  };\n  exports.Extrapolate = Extrapolate;\n\n  function checkNonDecreasing(name, arr) {\n    for (var i = 1; i < arr.length; ++i) {\n      if (arr[i] instanceof _AnimatedNode.default || arr[i - 1] instanceof _AnimatedNode.default) continue;\n      (0, _invariant.default)(arr[i] >= arr[i - 1], '%s must be monotonically non-decreasing. (%s)', name, arr);\n    }\n  }\n\n  function checkMinElements(name, arr) {\n    (0, _invariant.default)(arr.length >= 2, '%s must have at least 2 elements. (%s)', name, arr);\n  }\n\n  function checkValidNumbers(name, arr) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] instanceof _AnimatedNode.default) continue;\n      (0, _invariant.default)(Number.isFinite(arr[i]), '%s cannot include %s. (%s)', name, arr[i], arr);\n    }\n  }\n\n  function interpolate(value, config) {\n    var inputRange = config.inputRange,\n        outputRange = config.outputRange,\n        _config$extrapolate = config.extrapolate,\n        extrapolate = _config$extrapolate === void 0 ? Extrapolate.EXTEND : _config$extrapolate,\n        extrapolateLeft = config.extrapolateLeft,\n        extrapolateRight = config.extrapolateRight;\n    checkMinElements('inputRange', inputRange);\n    checkValidNumbers('inputRange', inputRange);\n    checkMinElements('outputRange', outputRange);\n    checkValidNumbers('outputRange', outputRange);\n    checkNonDecreasing('inputRange', inputRange);\n    (0, _invariant.default)(inputRange.length === outputRange.length, 'inputRange and outputRange must be the same length.');\n    var left = extrapolateLeft || extrapolate;\n    var right = extrapolateRight || extrapolate;\n    var output = interpolateInternal(value, inputRange, outputRange);\n\n    if (left === Extrapolate.EXTEND) {} else if (left === Extrapolate.CLAMP) {\n      output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[0]), outputRange[0], output);\n    } else if (left === Extrapolate.IDENTITY) {\n      output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[0]), value, output);\n    }\n\n    if (right === Extrapolate.EXTEND) {} else if (right === Extrapolate.CLAMP) {\n      output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.greaterThan)(value, inputRange[inputRange.length - 1]), outputRange[outputRange.length - 1], output);\n    } else if (right === Extrapolate.IDENTITY) {\n      output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.greaterThan)(value, inputRange[inputRange.length - 1]), value, output);\n    }\n\n    return output;\n  }\n});","map":[[10,0,1,0],[12,0,11,0],[14,0,13,0],[16,0,14,0],[18,0,15,0],[20,0,17,0],[20,6,17,6,"interpolateInternalSingleProc"],[20,35,17,35],[20,38,17,38],[20,84,17,43],[20,94,18,2,"value"],[20,99,17,43],[20,101,19,2,"inS"],[20,104,17,43],[20,106,20,2,"inE"],[20,109,17,43],[20,111,21,2,"outS"],[20,115,17,43],[20,117,22,2,"outE"],[20,121,17,43],[20,123,23,2],[21,0,24,2],[21,8,24,8,"progress"],[21,16,24,16],[21,19,24,19],[21,42,24,26],[21,62,24,30,"value"],[21,67,24,26],[21,69,24,37,"inS"],[21,72,24,26],[21,73,24,19],[21,75,24,43],[21,95,24,47,"inE"],[21,98,24,43],[21,100,24,52,"inS"],[21,103,24,43],[21,104,24,19],[21,105,24,2],[22,0,26,2],[22,8,26,8,"resultForNonZeroRange"],[22,29,26,29],[22,32,26,32],[22,52,26,36,"outS"],[22,56,26,32],[22,58,26,42],[22,83,26,51,"progress"],[22,91,26,42],[22,93,26,61],[22,113,26,65,"outE"],[22,117,26,61],[22,119,26,71,"outS"],[22,123,26,61],[22,124,26,42],[22,125,26,32],[22,126,26,2],[23,0,27,2],[23,8,27,8,"result"],[23,14,27,14],[23,17,27,17],[23,55,27,22],[23,74,27,25,"inS"],[23,77,27,22],[23,79,27,30,"inE"],[23,82,27,22],[23,83,27,17],[23,85,27,36],[23,123,27,41],[23,148,27,50,"value"],[23,153,27,41],[23,155,27,57,"inS"],[23,158,27,41],[23,159,27,36],[23,161,27,63,"outS"],[23,165,27,36],[23,167,27,69,"outE"],[23,171,27,36],[23,172,27,17],[23,174,27,76,"resultForNonZeroRange"],[23,195,27,17],[23,196,27,2],[24,0,28,2],[24,11,28,9,"result"],[24,17,28,2],[25,0,29,1],[25,3,17,38],[25,4,17,0],[27,0,31,0],[27,11,31,9,"interpolateInternalSingle"],[27,36,31,0],[27,37,31,35,"value"],[27,42,31,0],[27,44,31,42,"inputRange"],[27,54,31,0],[27,56,31,54,"outputRange"],[27,67,31,0],[27,69,31,67,"offset"],[27,75,31,0],[27,77,31,75],[28,0,32,2],[28,8,32,8,"inS"],[28,11,32,11],[28,14,32,14,"inputRange"],[28,24,32,24],[28,25,32,25,"offset"],[28,31,32,24],[28,32,32,2],[29,0,33,2],[29,8,33,8,"inE"],[29,11,33,11],[29,14,33,14,"inputRange"],[29,24,33,24],[29,25,33,25,"offset"],[29,31,33,31],[29,34,33,34],[29,35,33,24],[29,36,33,2],[30,0,34,2],[30,8,34,8,"outS"],[30,12,34,12],[30,15,34,15,"outputRange"],[30,26,34,26],[30,27,34,27,"offset"],[30,33,34,26],[30,34,34,2],[31,0,35,2],[31,8,35,8,"outE"],[31,12,35,12],[31,15,35,15,"outputRange"],[31,26,35,26],[31,27,35,27,"offset"],[31,33,35,33],[31,36,35,36],[31,37,35,26],[31,38,35,2],[32,0,36,2],[32,11,36,9,"interpolateInternalSingleProc"],[32,40,36,38],[32,41,36,39,"value"],[32,46,36,38],[32,48,36,46,"inS"],[32,51,36,38],[32,53,36,51,"inE"],[32,56,36,38],[32,58,36,56,"outS"],[32,62,36,38],[32,64,36,62,"outE"],[32,68,36,38],[32,69,36,2],[33,0,37,1],[35,0,39,0],[35,11,39,9,"interpolateInternal"],[35,30,39,0],[35,31,39,29,"value"],[35,36,39,0],[35,38,39,36,"inputRange"],[35,48,39,0],[35,50,39,48,"outputRange"],[35,61,39,0],[35,63,39,73],[36,0,39,73],[36,8,39,61,"offset"],[36,14,39,73],[36,85,39,70],[36,86,39,73],[38,0,40,2],[38,8,40,6,"inputRange"],[38,18,40,16],[38,19,40,17,"length"],[38,25,40,6],[38,28,40,26,"offset"],[38,34,40,6],[38,39,40,37],[38,40,40,2],[38,42,40,40],[39,0,41,4],[39,13,41,11,"interpolateInternalSingle"],[39,38,41,36],[39,39,41,37,"value"],[39,44,41,36],[39,46,41,44,"inputRange"],[39,56,41,36],[39,58,41,56,"outputRange"],[39,69,41,36],[39,71,41,69,"offset"],[39,77,41,36],[39,78,41,4],[40,0,42,3],[42,0,43,2],[42,11,43,9],[42,49,44,4],[42,74,44,13,"value"],[42,79,44,4],[42,81,44,20,"inputRange"],[42,91,44,30],[42,92,44,31,"offset"],[42,98,44,37],[42,101,44,40],[42,102,44,30],[42,103,44,4],[42,104,43,9],[42,106,45,4,"interpolateInternalSingle"],[42,131,45,29],[42,132,45,30,"value"],[42,137,45,29],[42,139,45,37,"inputRange"],[42,149,45,29],[42,151,45,49,"outputRange"],[42,162,45,29],[42,164,45,62,"offset"],[42,170,45,29],[42,171,43,9],[42,173,46,4,"interpolateInternal"],[42,192,46,23],[42,193,46,24,"value"],[42,198,46,23],[42,200,46,31,"inputRange"],[42,210,46,23],[42,212,46,43,"outputRange"],[42,223,46,23],[42,225,46,56,"offset"],[42,231,46,62],[42,234,46,65],[42,235,46,23],[42,236,43,9],[42,237,43,2],[43,0,48,1],[45,0,50,7],[45,6,50,13,"Extrapolate"],[45,17,50,24],[45,20,50,27],[46,0,51,2,"EXTEND"],[46,4,51,2,"EXTEND"],[46,10,51,8],[46,12,51,10],[46,20,50,27],[47,0,52,2,"CLAMP"],[47,4,52,2,"CLAMP"],[47,9,52,7],[47,11,52,9],[47,18,50,27],[48,0,53,2,"IDENTITY"],[48,4,53,2,"IDENTITY"],[48,12,53,10],[48,14,53,12],[49,0,50,27],[49,3,50,7],[52,0,56,0],[52,11,56,9,"checkNonDecreasing"],[52,29,56,0],[52,30,56,28,"name"],[52,34,56,0],[52,36,56,34,"arr"],[52,39,56,0],[52,41,56,39],[53,0,57,2],[53,9,57,7],[53,13,57,11,"i"],[53,14,57,12],[53,17,57,15],[53,18,57,2],[53,20,57,18,"i"],[53,21,57,19],[53,24,57,22,"arr"],[53,27,57,25],[53,28,57,26,"length"],[53,34,57,2],[53,36,57,34],[53,38,57,36,"i"],[53,39,57,2],[53,41,57,39],[54,0,59,4],[54,10,59,8,"arr"],[54,13,59,11],[54,14,59,12,"i"],[54,15,59,11],[54,16,59,8],[54,28,59,26,"AnimatedNode"],[54,49,59,8],[54,53,59,42,"arr"],[54,56,59,45],[54,57,59,46,"i"],[54,58,59,47],[54,61,59,50],[54,62,59,45],[54,63,59,42],[54,75,59,64,"AnimatedNode"],[54,96,59,4],[54,98,60,6],[55,0,61,4],[55,30,62,6,"arr"],[55,33,62,9],[55,34,62,10,"i"],[55,35,62,9],[55,36,62,6],[55,40,62,16,"arr"],[55,43,62,19],[55,44,62,20,"i"],[55,45,62,21],[55,48,62,24],[55,49,62,19],[55,50,61,4],[55,52,63,6],[55,99,61,4],[55,101,64,6,"name"],[55,105,61,4],[55,107,65,6,"arr"],[55,110,61,4],[56,0,67,3],[57,0,68,1],[59,0,70,0],[59,11,70,9,"checkMinElements"],[59,27,70,0],[59,28,70,26,"name"],[59,32,70,0],[59,34,70,32,"arr"],[59,37,70,0],[59,39,70,37],[60,0,71,2],[60,28,72,4,"arr"],[60,31,72,7],[60,32,72,8,"length"],[60,38,72,4],[60,42,72,18],[60,43,71,2],[60,45,73,4],[60,85,71,2],[60,87,74,4,"name"],[60,91,71,2],[60,93,75,4,"arr"],[60,96,71,2],[61,0,77,1],[63,0,79,0],[63,11,79,9,"checkValidNumbers"],[63,28,79,0],[63,29,79,27,"name"],[63,33,79,0],[63,35,79,33,"arr"],[63,38,79,0],[63,40,79,38],[64,0,80,2],[64,9,80,7],[64,13,80,11,"i"],[64,14,80,12],[64,17,80,15],[64,18,80,2],[64,20,80,18,"i"],[64,21,80,19],[64,24,80,22,"arr"],[64,27,80,25],[64,28,80,26,"length"],[64,34,80,2],[64,36,80,34,"i"],[64,37,80,35],[64,39,80,2],[64,41,80,39],[65,0,82,4],[65,10,82,8,"arr"],[65,13,82,11],[65,14,82,12,"i"],[65,15,82,11],[65,16,82,8],[65,28,82,26,"AnimatedNode"],[65,49,82,4],[65,51,82,40],[66,0,83,4],[66,30,84,6,"Number"],[66,36,84,12],[66,37,84,13,"isFinite"],[66,45,84,6],[66,46,84,22,"arr"],[66,49,84,25],[66,50,84,26,"i"],[66,51,84,25],[66,52,84,6],[66,53,83,4],[66,55,85,6],[66,83,83,4],[66,85,86,6,"name"],[66,89,83,4],[66,91,87,6,"arr"],[66,94,87,9],[66,95,87,10,"i"],[66,96,87,9],[66,97,83,4],[66,99,88,6,"arr"],[66,102,83,4],[67,0,90,3],[68,0,91,1],[70,0,93,15],[70,11,93,24,"interpolate"],[70,22,93,15],[70,23,93,36,"value"],[70,28,93,15],[70,30,93,43,"config"],[70,36,93,15],[70,38,93,51],[71,0,93,51],[71,8,95,4,"inputRange"],[71,18,93,51],[71,21,100,6,"config"],[71,27,93,51],[71,28,95,4,"inputRange"],[71,38,93,51],[72,0,93,51],[72,8,96,4,"outputRange"],[72,19,93,51],[72,22,100,6,"config"],[72,28,93,51],[72,29,96,4,"outputRange"],[72,40,93,51],[73,0,93,51],[73,30,100,6,"config"],[73,36,93,51],[73,37,97,4,"extrapolate"],[73,48,93,51],[74,0,93,51],[74,8,97,4,"extrapolate"],[74,19,93,51],[74,55,97,18,"Extrapolate"],[74,66,97,29],[74,67,97,30,"EXTEND"],[74,73,93,51],[75,0,93,51],[75,8,98,4,"extrapolateLeft"],[75,23,93,51],[75,26,100,6,"config"],[75,32,93,51],[75,33,98,4,"extrapolateLeft"],[75,48,93,51],[76,0,93,51],[76,8,99,4,"extrapolateRight"],[76,24,93,51],[76,27,100,6,"config"],[76,33,93,51],[76,34,99,4,"extrapolateRight"],[76,50,93,51],[77,0,101,2,"checkMinElements"],[77,4,101,2,"checkMinElements"],[77,20,101,18],[77,21,101,19],[77,33,101,18],[77,35,101,33,"inputRange"],[77,45,101,18],[77,46,101,2],[78,0,102,2,"checkValidNumbers"],[78,4,102,2,"checkValidNumbers"],[78,21,102,19],[78,22,102,20],[78,34,102,19],[78,36,102,34,"inputRange"],[78,46,102,19],[78,47,102,2],[79,0,103,2,"checkMinElements"],[79,4,103,2,"checkMinElements"],[79,20,103,18],[79,21,103,19],[79,34,103,18],[79,36,103,34,"outputRange"],[79,47,103,18],[79,48,103,2],[80,0,104,2,"checkValidNumbers"],[80,4,104,2,"checkValidNumbers"],[80,21,104,19],[80,22,104,20],[80,35,104,19],[80,37,104,35,"outputRange"],[80,48,104,19],[80,49,104,2],[81,0,105,2,"checkNonDecreasing"],[81,4,105,2,"checkNonDecreasing"],[81,22,105,20],[81,23,105,21],[81,35,105,20],[81,37,105,35,"inputRange"],[81,47,105,20],[81,48,105,2],[82,0,106,2],[82,28,107,4,"inputRange"],[82,38,107,14],[82,39,107,15,"length"],[82,45,107,4],[82,50,107,26,"outputRange"],[82,61,107,37],[82,62,107,38,"length"],[82,68,106,2],[82,70,108,4],[82,123,106,2],[83,0,111,2],[83,8,111,8,"left"],[83,12,111,12],[83,15,111,15,"extrapolateLeft"],[83,30,111,30],[83,34,111,34,"extrapolate"],[83,45,111,2],[84,0,112,2],[84,8,112,8,"right"],[84,13,112,13],[84,16,112,16,"extrapolateRight"],[84,32,112,32],[84,36,112,36,"extrapolate"],[84,47,112,2],[85,0,113,2],[85,8,113,6,"output"],[85,14,113,12],[85,17,113,15,"interpolateInternal"],[85,36,113,34],[85,37,113,35,"value"],[85,42,113,34],[85,44,113,42,"inputRange"],[85,54,113,34],[85,56,113,54,"outputRange"],[85,67,113,34],[85,68,113,2],[87,0,115,2],[87,8,115,6,"left"],[87,12,115,10],[87,17,115,15,"Extrapolate"],[87,28,115,26],[87,29,115,27,"EXTEND"],[87,35,115,2],[87,37,115,35],[87,38,116,3],[87,39,115,2],[87,45,116,9],[87,49,116,13,"left"],[87,53,116,17],[87,58,116,22,"Extrapolate"],[87,69,116,33],[87,70,116,34,"CLAMP"],[87,75,116,9],[87,77,116,41],[88,0,117,4,"output"],[88,6,117,4,"output"],[88,12,117,10],[88,15,117,13],[88,53,117,18],[88,78,117,27,"value"],[88,83,117,18],[88,85,117,34,"inputRange"],[88,95,117,44],[88,96,117,45],[88,97,117,44],[88,98,117,18],[88,99,117,13],[88,101,117,50,"outputRange"],[88,112,117,61],[88,113,117,62],[88,114,117,61],[88,115,117,13],[88,117,117,66,"output"],[88,123,117,13],[88,124,117,4],[89,0,118,3],[89,5,116,9],[89,11,118,9],[89,15,118,13,"left"],[89,19,118,17],[89,24,118,22,"Extrapolate"],[89,35,118,33],[89,36,118,34,"IDENTITY"],[89,44,118,9],[89,46,118,44],[90,0,119,4,"output"],[90,6,119,4,"output"],[90,12,119,10],[90,15,119,13],[90,53,119,18],[90,78,119,27,"value"],[90,83,119,18],[90,85,119,34,"inputRange"],[90,95,119,44],[90,96,119,45],[90,97,119,44],[90,98,119,18],[90,99,119,13],[90,101,119,50,"value"],[90,106,119,13],[90,108,119,57,"output"],[90,114,119,13],[90,115,119,4],[91,0,120,3],[93,0,122,2],[93,8,122,6,"right"],[93,13,122,11],[93,18,122,16,"Extrapolate"],[93,29,122,27],[93,30,122,28,"EXTEND"],[93,36,122,2],[93,38,122,36],[93,39,123,3],[93,40,122,2],[93,46,123,9],[93,50,123,13,"right"],[93,55,123,18],[93,60,123,23,"Extrapolate"],[93,71,123,34],[93,72,123,35,"CLAMP"],[93,77,123,9],[93,79,123,42],[94,0,124,4,"output"],[94,6,124,4,"output"],[94,12,124,10],[94,15,124,13],[94,53,125,6],[94,81,125,18,"value"],[94,86,125,6],[94,88,125,25,"inputRange"],[94,98,125,35],[94,99,125,36,"inputRange"],[94,109,125,46],[94,110,125,47,"length"],[94,116,125,36],[94,119,125,56],[94,120,125,35],[94,121,125,6],[94,122,124,13],[94,124,126,6,"outputRange"],[94,135,126,17],[94,136,126,18,"outputRange"],[94,147,126,29],[94,148,126,30,"length"],[94,154,126,18],[94,157,126,39],[94,158,126,17],[94,159,124,13],[94,161,127,6,"output"],[94,167,124,13],[94,168,124,4],[95,0,129,3],[95,5,123,9],[95,11,129,9],[95,15,129,13,"right"],[95,20,129,18],[95,25,129,23,"Extrapolate"],[95,36,129,34],[95,37,129,35,"IDENTITY"],[95,45,129,9],[95,47,129,45],[96,0,130,4,"output"],[96,6,130,4,"output"],[96,12,130,10],[96,15,130,13],[96,53,131,6],[96,81,131,18,"value"],[96,86,131,6],[96,88,131,25,"inputRange"],[96,98,131,35],[96,99,131,36,"inputRange"],[96,109,131,46],[96,110,131,47,"length"],[96,116,131,36],[96,119,131,56],[96,120,131,35],[96,121,131,6],[96,122,130,13],[96,124,132,6,"value"],[96,129,130,13],[96,131,133,6,"output"],[96,137,130,13],[96,138,130,4],[97,0,135,3],[99,0,137,2],[99,11,137,9,"output"],[99,17,137,2],[100,0,138,1]]},"type":"js/module"}]}