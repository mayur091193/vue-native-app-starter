{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@unimodules/core","data":{"isAsync":false}},{"name":"invariant","data":{"isAsync":false}},{"name":"./ExpoLocation","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getProviderStatusAsync = getProviderStatusAsync;\n  exports.enableNetworkProviderAsync = enableNetworkProviderAsync;\n  exports.getCurrentPositionAsync = getCurrentPositionAsync;\n  exports.getHeadingAsync = getHeadingAsync;\n  exports.watchHeadingAsync = watchHeadingAsync;\n  exports.geocodeAsync = geocodeAsync;\n  exports.reverseGeocodeAsync = reverseGeocodeAsync;\n  exports.setApiKey = setApiKey;\n  exports.watchPositionAsync = watchPositionAsync;\n  exports.requestPermissionsAsync = requestPermissionsAsync;\n  exports.hasServicesEnabledAsync = hasServicesEnabledAsync;\n  exports.isBackgroundLocationAvailableAsync = isBackgroundLocationAvailableAsync;\n  exports.startLocationUpdatesAsync = startLocationUpdatesAsync;\n  exports.stopLocationUpdatesAsync = stopLocationUpdatesAsync;\n  exports.hasStartedLocationUpdatesAsync = hasStartedLocationUpdatesAsync;\n  exports.startGeofencingAsync = startGeofencingAsync;\n  exports.stopGeofencingAsync = stopGeofencingAsync;\n  exports.hasStartedGeofencingAsync = hasStartedGeofencingAsync;\n  exports.installWebGeolocationPolyfill = installWebGeolocationPolyfill;\n  exports._getCurrentWatchId = _getCurrentWatchId;\n  exports.EventEmitter = exports.GeofencingRegionState = exports.GeofencingEventType = exports.ActivityType = exports.Accuracy = void 0;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _core = _$$_REQUIRE(_dependencyMap[2], \"@unimodules/core\");\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"invariant\"));\n\n  var _ExpoLocation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./ExpoLocation\"));\n\n  var LocationEventEmitter = new _core.EventEmitter(_ExpoLocation.default);\n  exports.EventEmitter = LocationEventEmitter;\n  var LocationAccuracy;\n  exports.Accuracy = LocationAccuracy;\n\n  (function (LocationAccuracy) {\n    LocationAccuracy[LocationAccuracy[\"Lowest\"] = 1] = \"Lowest\";\n    LocationAccuracy[LocationAccuracy[\"Low\"] = 2] = \"Low\";\n    LocationAccuracy[LocationAccuracy[\"Balanced\"] = 3] = \"Balanced\";\n    LocationAccuracy[LocationAccuracy[\"High\"] = 4] = \"High\";\n    LocationAccuracy[LocationAccuracy[\"Highest\"] = 5] = \"Highest\";\n    LocationAccuracy[LocationAccuracy[\"BestForNavigation\"] = 6] = \"BestForNavigation\";\n  })(LocationAccuracy || (exports.Accuracy = LocationAccuracy = {}));\n\n  var LocationActivityType;\n  exports.ActivityType = LocationActivityType;\n\n  (function (LocationActivityType) {\n    LocationActivityType[LocationActivityType[\"Other\"] = 1] = \"Other\";\n    LocationActivityType[LocationActivityType[\"AutomotiveNavigation\"] = 2] = \"AutomotiveNavigation\";\n    LocationActivityType[LocationActivityType[\"Fitness\"] = 3] = \"Fitness\";\n    LocationActivityType[LocationActivityType[\"OtherNavigation\"] = 4] = \"OtherNavigation\";\n    LocationActivityType[LocationActivityType[\"Airborne\"] = 5] = \"Airborne\";\n  })(LocationActivityType || (exports.ActivityType = LocationActivityType = {}));\n\n  var GeofencingEventType;\n  exports.GeofencingEventType = GeofencingEventType;\n\n  (function (GeofencingEventType) {\n    GeofencingEventType[GeofencingEventType[\"Enter\"] = 1] = \"Enter\";\n    GeofencingEventType[GeofencingEventType[\"Exit\"] = 2] = \"Exit\";\n  })(GeofencingEventType || (exports.GeofencingEventType = GeofencingEventType = {}));\n\n  var GeofencingRegionState;\n  exports.GeofencingRegionState = GeofencingRegionState;\n\n  (function (GeofencingRegionState) {\n    GeofencingRegionState[GeofencingRegionState[\"Unknown\"] = 0] = \"Unknown\";\n    GeofencingRegionState[GeofencingRegionState[\"Inside\"] = 1] = \"Inside\";\n    GeofencingRegionState[GeofencingRegionState[\"Outside\"] = 2] = \"Outside\";\n  })(GeofencingRegionState || (exports.GeofencingRegionState = GeofencingRegionState = {}));\n\n  var nextWatchId = 0;\n  var headingId;\n\n  function _getNextWatchId() {\n    nextWatchId++;\n    return nextWatchId;\n  }\n\n  function _getCurrentWatchId() {\n    return nextWatchId;\n  }\n\n  var watchCallbacks = {};\n  var deviceEventSubscription;\n  var headingEventSub;\n  var googleApiKey;\n  var googleApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n\n  function getProviderStatusAsync() {\n    return _regenerator.default.async(function getProviderStatusAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", _ExpoLocation.default.getProviderStatusAsync());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  function enableNetworkProviderAsync() {\n    return _regenerator.default.async(function enableNetworkProviderAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(_core.Platform.OS === 'android')) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", _ExpoLocation.default.enableNetworkProviderAsync());\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  }\n\n  function getCurrentPositionAsync() {\n    var options,\n        _args3 = arguments;\n    return _regenerator.default.async(function getCurrentPositionAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n            return _context3.abrupt(\"return\", _ExpoLocation.default.getCurrentPositionAsync(options));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  }\n\n  function getHeadingAsync() {\n    return _regenerator.default.async(function getHeadingAsync$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", new Promise(function _callee(resolve, reject) {\n              var tries, headingSub, done, subscription, _tries;\n\n              return _regenerator.default.async(function _callee$(_context4) {\n                while (1) {\n                  switch (_context4.prev = _context4.next) {\n                    case 0:\n                      _context4.prev = 0;\n\n                      if (!headingEventSub) {\n                        _context4.next = 6;\n                        break;\n                      }\n\n                      tries = 0;\n                      headingSub = LocationEventEmitter.addListener('Expo.headingChanged', function (_ref) {\n                        var heading = _ref.heading;\n\n                        if (heading.accuracy > 1 || tries > 5) {\n                          resolve(heading);\n                          LocationEventEmitter.removeSubscription(headingSub);\n                        } else {\n                          tries += 1;\n                        }\n                      });\n                      _context4.next = 12;\n                      break;\n\n                    case 6:\n                      done = false;\n                      _tries = 0;\n                      _context4.next = 10;\n                      return _regenerator.default.awrap(watchHeadingAsync(function (heading) {\n                        if (!done) {\n                          if (heading.accuracy > 1 || _tries > 5) {\n                            subscription.remove();\n                            resolve(heading);\n                            done = true;\n                          } else {\n                            _tries += 1;\n                          }\n                        } else {\n                          subscription.remove();\n                        }\n                      }));\n\n                    case 10:\n                      subscription = _context4.sent;\n\n                      if (done) {\n                        subscription.remove();\n                      }\n\n                    case 12:\n                      _context4.next = 17;\n                      break;\n\n                    case 14:\n                      _context4.prev = 14;\n                      _context4.t0 = _context4[\"catch\"](0);\n                      reject(_context4.t0);\n\n                    case 17:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }\n              }, null, null, [[0, 14]]);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    });\n  }\n\n  function watchHeadingAsync(callback) {\n    return _regenerator.default.async(function watchHeadingAsync$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (headingEventSub) {\n              _removeHeadingWatcher(headingId);\n            }\n\n            headingEventSub = LocationEventEmitter.addListener('Expo.headingChanged', function (_ref2) {\n              var watchId = _ref2.watchId,\n                  heading = _ref2.heading;\n              var callback = watchCallbacks[watchId];\n\n              if (callback) {\n                callback(heading);\n              } else {\n                _ExpoLocation.default.removeWatchAsync(watchId);\n              }\n            });\n            headingId = _getNextWatchId();\n            watchCallbacks[headingId] = callback;\n            _context6.next = 6;\n            return _regenerator.default.awrap(_ExpoLocation.default.watchDeviceHeading(headingId));\n\n          case 6:\n            return _context6.abrupt(\"return\", {\n              remove: function remove() {\n                _removeHeadingWatcher(headingId);\n              }\n            });\n\n          case 7:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    });\n  }\n\n  function _removeHeadingWatcher(watchId) {\n    if (!watchCallbacks[watchId]) {\n      return;\n    }\n\n    delete watchCallbacks[watchId];\n\n    _ExpoLocation.default.removeWatchAsync(watchId);\n\n    if (headingEventSub) {\n      LocationEventEmitter.removeSubscription(headingEventSub);\n      headingEventSub = null;\n    }\n  }\n\n  function _maybeInitializeEmitterSubscription() {\n    if (!deviceEventSubscription) {\n      deviceEventSubscription = LocationEventEmitter.addListener('Expo.locationChanged', function (_ref3) {\n        var watchId = _ref3.watchId,\n            location = _ref3.location;\n        var callback = watchCallbacks[watchId];\n\n        if (callback) {\n          callback(location);\n        } else {\n          _ExpoLocation.default.removeWatchAsync(watchId);\n        }\n      });\n    }\n  }\n\n  function geocodeAsync(address) {\n    return _regenerator.default.async(function geocodeAsync$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            return _context7.abrupt(\"return\", _ExpoLocation.default.geocodeAsync(address).catch(function (error) {\n              var platformUsesGoogleMaps = _core.Platform.OS === 'android' || _core.Platform.OS === 'web';\n\n              if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n                if (!googleApiKey) {\n                  throw new _core.CodedError(error.code, error.message + \" Please set a Google API Key to use geocoding.\");\n                }\n\n                return _googleGeocodeAsync(address);\n              }\n\n              throw error;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    });\n  }\n\n  function reverseGeocodeAsync(location) {\n    return _regenerator.default.async(function reverseGeocodeAsync$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!(typeof location.latitude !== 'number' || typeof location.longitude !== 'number')) {\n              _context8.next = 2;\n              break;\n            }\n\n            throw new TypeError('Location should be an object with number properties `latitude` and `longitude`.');\n\n          case 2:\n            return _context8.abrupt(\"return\", _ExpoLocation.default.reverseGeocodeAsync(location).catch(function (error) {\n              var platformUsesGoogleMaps = _core.Platform.OS === 'android' || _core.Platform.OS === 'web';\n\n              if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n                if (!googleApiKey) {\n                  throw new _core.CodedError(error.code, error.message + \" Please set a Google API Key to use geocoding.\");\n                }\n\n                return _googleReverseGeocodeAsync(location);\n              }\n\n              throw error;\n            }));\n\n          case 3:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    });\n  }\n\n  function setApiKey(apiKey) {\n    googleApiKey = apiKey;\n  }\n\n  function _googleGeocodeAsync(address) {\n    var result, resultObject;\n    return _regenerator.default.async(function _googleGeocodeAsync$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return _regenerator.default.awrap(fetch(googleApiUrl + \"?key=\" + googleApiKey + \"&address=\" + encodeURI(address)));\n\n          case 2:\n            result = _context9.sent;\n            _context9.next = 5;\n            return _regenerator.default.awrap(result.json());\n\n          case 5:\n            resultObject = _context9.sent;\n\n            if (!(resultObject.status === 'ZERO_RESULTS')) {\n              _context9.next = 8;\n              break;\n            }\n\n            return _context9.abrupt(\"return\", []);\n\n          case 8:\n            assertGeocodeResults(resultObject);\n            return _context9.abrupt(\"return\", resultObject.results.map(function (result) {\n              var location = result.geometry.location;\n              return {\n                latitude: location.lat,\n                longitude: location.lng\n              };\n            }));\n\n          case 10:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    });\n  }\n\n  function _googleReverseGeocodeAsync(options) {\n    var result, resultObject;\n    return _regenerator.default.async(function _googleReverseGeocodeAsync$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.next = 2;\n            return _regenerator.default.awrap(fetch(googleApiUrl + \"?key=\" + googleApiKey + \"&latlng=\" + options.latitude + \",\" + options.longitude));\n\n          case 2:\n            result = _context10.sent;\n            _context10.next = 5;\n            return _regenerator.default.awrap(result.json());\n\n          case 5:\n            resultObject = _context10.sent;\n\n            if (!(resultObject.status === 'ZERO_RESULTS')) {\n              _context10.next = 8;\n              break;\n            }\n\n            return _context10.abrupt(\"return\", []);\n\n          case 8:\n            assertGeocodeResults(resultObject);\n            return _context10.abrupt(\"return\", resultObject.results.map(function (result) {\n              var address = {};\n              result.address_components.forEach(function (component) {\n                if (component.types.includes('locality')) {\n                  address.city = component.long_name;\n                } else if (component.types.includes('street_address')) {\n                  address.street = component.long_name;\n                } else if (component.types.includes('administrative_area_level_1')) {\n                  address.region = component.long_name;\n                } else if (component.types.includes('country')) {\n                  address.country = component.long_name;\n                } else if (component.types.includes('postal_code')) {\n                  address.postalCode = component.long_name;\n                } else if (component.types.includes('point_of_interest')) {\n                  address.name = component.long_name;\n                }\n              });\n              return address;\n            }));\n\n          case 10:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    });\n  }\n\n  function assertGeocodeResults(resultObject) {\n    var status = resultObject.status,\n        error_message = resultObject.error_message;\n\n    if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n      if (error_message) {\n        throw new _core.CodedError(status, error_message);\n      } else if (status === 'UNKNOWN_ERROR') {\n        throw new _core.CodedError(status, 'the request could not be processed due to a server error. The request may succeed if you try again.');\n      }\n\n      throw new _core.CodedError(status, \"An error occurred during geocoding.\");\n    }\n  }\n\n  function watchPosition(success, error, options) {\n    _maybeInitializeEmitterSubscription();\n\n    var watchId = _getNextWatchId();\n\n    watchCallbacks[watchId] = success;\n\n    _ExpoLocation.default.watchPositionImplAsync(watchId, options).catch(function (err) {\n      _removeWatcher(watchId);\n\n      error({\n        watchId: watchId,\n        message: err.message,\n        code: err.code\n      });\n    });\n\n    return watchId;\n  }\n\n  function watchPositionAsync(options, callback) {\n    var watchId;\n    return _regenerator.default.async(function watchPositionAsync$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _maybeInitializeEmitterSubscription();\n\n            watchId = _getNextWatchId();\n            watchCallbacks[watchId] = callback;\n            _context11.next = 5;\n            return _regenerator.default.awrap(_ExpoLocation.default.watchPositionImplAsync(watchId, options));\n\n          case 5:\n            return _context11.abrupt(\"return\", {\n              remove: function remove() {\n                _removeWatcher(watchId);\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    });\n  }\n\n  function clearWatch(watchId) {\n    _removeWatcher(watchId);\n  }\n\n  function _removeWatcher(watchId) {\n    if (!watchCallbacks[watchId]) {\n      return;\n    }\n\n    _ExpoLocation.default.removeWatchAsync(watchId);\n\n    delete watchCallbacks[watchId];\n\n    if (Object.keys(watchCallbacks).length === 0 && deviceEventSubscription) {\n      LocationEventEmitter.removeSubscription(deviceEventSubscription);\n      deviceEventSubscription = null;\n    }\n  }\n\n  function getCurrentPosition(success) {\n    var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    (0, _invariant.default)(typeof success === 'function', 'Must provide a valid success callback.');\n    (0, _invariant.default)(typeof options === 'object', 'options must be an object.');\n\n    _getCurrentPositionAsyncWrapper(success, error, options);\n  }\n\n  function _getCurrentPositionAsyncWrapper(success, error, options) {\n    var result;\n    return _regenerator.default.async(function _getCurrentPositionAsyncWrapper$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _context12.prev = 0;\n            _context12.next = 3;\n            return _regenerator.default.awrap(_ExpoLocation.default.requestPermissionsAsync());\n\n          case 3:\n            _context12.next = 5;\n            return _regenerator.default.awrap(getCurrentPositionAsync(options));\n\n          case 5:\n            result = _context12.sent;\n            success(result);\n            _context12.next = 12;\n            break;\n\n          case 9:\n            _context12.prev = 9;\n            _context12.t0 = _context12[\"catch\"](0);\n            error(_context12.t0);\n\n          case 12:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, null, null, [[0, 9]]);\n  }\n\n  function requestPermissionsAsync() {\n    return _regenerator.default.async(function requestPermissionsAsync$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.next = 2;\n            return _regenerator.default.awrap(_ExpoLocation.default.requestPermissionsAsync());\n\n          case 2:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    });\n  }\n\n  function hasServicesEnabledAsync() {\n    return _regenerator.default.async(function hasServicesEnabledAsync$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            _context14.next = 2;\n            return _regenerator.default.awrap(_ExpoLocation.default.hasServicesEnabledAsync());\n\n          case 2:\n            return _context14.abrupt(\"return\", _context14.sent);\n\n          case 3:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    });\n  }\n\n  function _validateTaskName(taskName) {\n    (0, _invariant.default)(taskName && typeof taskName === 'string', '`taskName` must be a non-empty string.');\n  }\n\n  function isBackgroundLocationAvailableAsync() {\n    var providerStatus;\n    return _regenerator.default.async(function isBackgroundLocationAvailableAsync$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            _context15.next = 2;\n            return _regenerator.default.awrap(getProviderStatusAsync());\n\n          case 2:\n            providerStatus = _context15.sent;\n            return _context15.abrupt(\"return\", providerStatus.backgroundModeEnabled);\n\n          case 4:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    });\n  }\n\n  function startLocationUpdatesAsync(taskName) {\n    var options,\n        _args16 = arguments;\n    return _regenerator.default.async(function startLocationUpdatesAsync$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            options = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : {\n              accuracy: LocationAccuracy.Balanced\n            };\n\n            _validateTaskName(taskName);\n\n            _context16.next = 4;\n            return _regenerator.default.awrap(_ExpoLocation.default.startLocationUpdatesAsync(taskName, options));\n\n          case 4:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    });\n  }\n\n  function stopLocationUpdatesAsync(taskName) {\n    return _regenerator.default.async(function stopLocationUpdatesAsync$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            _validateTaskName(taskName);\n\n            _context17.next = 3;\n            return _regenerator.default.awrap(_ExpoLocation.default.stopLocationUpdatesAsync(taskName));\n\n          case 3:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    });\n  }\n\n  function hasStartedLocationUpdatesAsync(taskName) {\n    return _regenerator.default.async(function hasStartedLocationUpdatesAsync$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            _validateTaskName(taskName);\n\n            return _context18.abrupt(\"return\", _ExpoLocation.default.hasStartedLocationUpdatesAsync(taskName));\n\n          case 2:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    });\n  }\n\n  function _validateRegions(regions) {\n    if (!regions || regions.length === 0) {\n      throw new Error('Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions');\n    }\n\n    for (var _iterator = regions, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref4;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref4 = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref4 = _i.value;\n      }\n\n      var _region = _ref4;\n\n      if (typeof _region.latitude !== 'number') {\n        throw new TypeError(\"Region's latitude must be a number. Got '\" + _region.latitude + \"' instead.\");\n      }\n\n      if (typeof _region.longitude !== 'number') {\n        throw new TypeError(\"Region's longitude must be a number. Got '\" + _region.longitude + \"' instead.\");\n      }\n\n      if (typeof _region.radius !== 'number') {\n        throw new TypeError(\"Region's radius must be a number. Got '\" + _region.radius + \"' instead.\");\n      }\n    }\n  }\n\n  function startGeofencingAsync(taskName) {\n    var regions,\n        _args19 = arguments;\n    return _regenerator.default.async(function startGeofencingAsync$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            regions = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : [];\n\n            _validateTaskName(taskName);\n\n            _validateRegions(regions);\n\n            _context19.next = 5;\n            return _regenerator.default.awrap(_ExpoLocation.default.startGeofencingAsync(taskName, {\n              regions: regions\n            }));\n\n          case 5:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    });\n  }\n\n  function stopGeofencingAsync(taskName) {\n    return _regenerator.default.async(function stopGeofencingAsync$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            _validateTaskName(taskName);\n\n            _context20.next = 3;\n            return _regenerator.default.awrap(_ExpoLocation.default.stopGeofencingAsync(taskName));\n\n          case 3:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    });\n  }\n\n  function hasStartedGeofencingAsync(taskName) {\n    return _regenerator.default.async(function hasStartedGeofencingAsync$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            _validateTaskName(taskName);\n\n            return _context21.abrupt(\"return\", _ExpoLocation.default.hasStartedGeofencingAsync(taskName));\n\n          case 2:\n          case \"end\":\n            return _context21.stop();\n        }\n      }\n    });\n  }\n\n  function installWebGeolocationPolyfill() {\n    if (_core.Platform.OS !== 'web') {\n      window.navigator.geolocation = {\n        getCurrentPosition: getCurrentPosition,\n        watchPosition: watchPosition,\n        clearWatch: clearWatch,\n        stopObserving: function stopObserving() {}\n      };\n    }\n  }\n});","map":[[31,0,1,0],[33,0,2,0],[35,0,3,0],[37,0,4,0],[37,6,4,6,"LocationEventEmitter"],[37,26,4,26],[37,29,4,29],[37,33,4,33,"EventEmitter"],[37,51,4,29],[37,52,4,46,"ExpoLocation"],[37,73,4,29],[37,74,4,0],[39,0,5,0],[39,6,5,4,"LocationAccuracy"],[39,22,5,0],[42,0,6,0],[42,3,6,1],[42,13,6,11,"LocationAccuracy"],[42,29,6,1],[42,31,6,29],[43,0,7,4,"LocationAccuracy"],[43,4,7,4,"LocationAccuracy"],[43,20,7,20],[43,21,7,21,"LocationAccuracy"],[43,37,7,37],[43,38,7,38],[43,46,7,37],[43,47,7,21],[43,50,7,50],[43,51,7,20],[43,52,7,4],[43,55,7,55],[43,63,7,4],[44,0,8,4,"LocationAccuracy"],[44,4,8,4,"LocationAccuracy"],[44,20,8,20],[44,21,8,21,"LocationAccuracy"],[44,37,8,37],[44,38,8,38],[44,43,8,37],[44,44,8,21],[44,47,8,47],[44,48,8,20],[44,49,8,4],[44,52,8,52],[44,57,8,4],[45,0,9,4,"LocationAccuracy"],[45,4,9,4,"LocationAccuracy"],[45,20,9,20],[45,21,9,21,"LocationAccuracy"],[45,37,9,37],[45,38,9,38],[45,48,9,37],[45,49,9,21],[45,52,9,52],[45,53,9,20],[45,54,9,4],[45,57,9,57],[45,67,9,4],[46,0,10,4,"LocationAccuracy"],[46,4,10,4,"LocationAccuracy"],[46,20,10,20],[46,21,10,21,"LocationAccuracy"],[46,37,10,37],[46,38,10,38],[46,44,10,37],[46,45,10,21],[46,48,10,48],[46,49,10,20],[46,50,10,4],[46,53,10,53],[46,59,10,4],[47,0,11,4,"LocationAccuracy"],[47,4,11,4,"LocationAccuracy"],[47,20,11,20],[47,21,11,21,"LocationAccuracy"],[47,37,11,37],[47,38,11,38],[47,47,11,37],[47,48,11,21],[47,51,11,51],[47,52,11,20],[47,53,11,4],[47,56,11,56],[47,65,11,4],[48,0,12,4,"LocationAccuracy"],[48,4,12,4,"LocationAccuracy"],[48,20,12,20],[48,21,12,21,"LocationAccuracy"],[48,37,12,37],[48,38,12,38],[48,57,12,37],[48,58,12,21],[48,61,12,61],[48,62,12,20],[48,63,12,4],[48,66,12,66],[48,85,12,4],[49,0,13,1],[49,3,6,0],[49,5,13,3,"LocationAccuracy"],[49,21,13,19],[49,45,13,24,"LocationAccuracy"],[49,61,13,40],[49,64,13,43],[49,66,13,19],[49,67,6,0],[51,0,14,0],[51,6,14,4,"LocationActivityType"],[51,26,14,0],[54,0,15,0],[54,3,15,1],[54,13,15,11,"LocationActivityType"],[54,33,15,1],[54,35,15,33],[55,0,16,4,"LocationActivityType"],[55,4,16,4,"LocationActivityType"],[55,24,16,24],[55,25,16,25,"LocationActivityType"],[55,45,16,45],[55,46,16,46],[55,53,16,45],[55,54,16,25],[55,57,16,57],[55,58,16,24],[55,59,16,4],[55,62,16,62],[55,69,16,4],[56,0,17,4,"LocationActivityType"],[56,4,17,4,"LocationActivityType"],[56,24,17,24],[56,25,17,25,"LocationActivityType"],[56,45,17,45],[56,46,17,46],[56,68,17,45],[56,69,17,25],[56,72,17,72],[56,73,17,24],[56,74,17,4],[56,77,17,77],[56,99,17,4],[57,0,18,4,"LocationActivityType"],[57,4,18,4,"LocationActivityType"],[57,24,18,24],[57,25,18,25,"LocationActivityType"],[57,45,18,45],[57,46,18,46],[57,55,18,45],[57,56,18,25],[57,59,18,59],[57,60,18,24],[57,61,18,4],[57,64,18,64],[57,73,18,4],[58,0,19,4,"LocationActivityType"],[58,4,19,4,"LocationActivityType"],[58,24,19,24],[58,25,19,25,"LocationActivityType"],[58,45,19,45],[58,46,19,46],[58,63,19,45],[58,64,19,25],[58,67,19,67],[58,68,19,24],[58,69,19,4],[58,72,19,72],[58,89,19,4],[59,0,20,4,"LocationActivityType"],[59,4,20,4,"LocationActivityType"],[59,24,20,24],[59,25,20,25,"LocationActivityType"],[59,45,20,45],[59,46,20,46],[59,56,20,45],[59,57,20,25],[59,60,20,60],[59,61,20,24],[59,62,20,4],[59,65,20,65],[59,75,20,4],[60,0,21,1],[60,3,15,0],[60,5,21,3,"LocationActivityType"],[60,25,21,23],[60,53,21,28,"LocationActivityType"],[60,73,21,48],[60,76,21,51],[60,78,21,23],[60,79,15,0],[62,0,23,7],[62,6,23,11,"GeofencingEventType"],[62,25,23,7],[65,0,24,0],[65,3,24,1],[65,13,24,11,"GeofencingEventType"],[65,32,24,1],[65,34,24,32],[66,0,25,4,"GeofencingEventType"],[66,4,25,4,"GeofencingEventType"],[66,23,25,23],[66,24,25,24,"GeofencingEventType"],[66,43,25,43],[66,44,25,44],[66,51,25,43],[66,52,25,24],[66,55,25,55],[66,56,25,23],[66,57,25,4],[66,60,25,60],[66,67,25,4],[67,0,26,4,"GeofencingEventType"],[67,4,26,4,"GeofencingEventType"],[67,23,26,23],[67,24,26,24,"GeofencingEventType"],[67,43,26,43],[67,44,26,44],[67,50,26,43],[67,51,26,24],[67,54,26,54],[67,55,26,23],[67,56,26,4],[67,59,26,59],[67,65,26,4],[68,0,27,1],[68,3,24,0],[68,5,27,3,"GeofencingEventType"],[68,24,27,22],[68,59,27,27,"GeofencingEventType"],[68,78,27,46],[68,81,27,49],[68,83,27,22],[68,84,24,0],[70,0,28,7],[70,6,28,11,"GeofencingRegionState"],[70,27,28,7],[73,0,29,0],[73,3,29,1],[73,13,29,11,"GeofencingRegionState"],[73,34,29,1],[73,36,29,34],[74,0,30,4,"GeofencingRegionState"],[74,4,30,4,"GeofencingRegionState"],[74,25,30,25],[74,26,30,26,"GeofencingRegionState"],[74,47,30,47],[74,48,30,48],[74,57,30,47],[74,58,30,26],[74,61,30,61],[74,62,30,25],[74,63,30,4],[74,66,30,66],[74,75,30,4],[75,0,31,4,"GeofencingRegionState"],[75,4,31,4,"GeofencingRegionState"],[75,25,31,25],[75,26,31,26,"GeofencingRegionState"],[75,47,31,47],[75,48,31,48],[75,56,31,47],[75,57,31,26],[75,60,31,60],[75,61,31,25],[75,62,31,4],[75,65,31,65],[75,73,31,4],[76,0,32,4,"GeofencingRegionState"],[76,4,32,4,"GeofencingRegionState"],[76,25,32,25],[76,26,32,26,"GeofencingRegionState"],[76,47,32,47],[76,48,32,48],[76,57,32,47],[76,58,32,26],[76,61,32,61],[76,62,32,25],[76,63,32,4],[76,66,32,66],[76,75,32,4],[77,0,33,1],[77,3,29,0],[77,5,33,3,"GeofencingRegionState"],[77,26,33,24],[77,63,33,29,"GeofencingRegionState"],[77,84,33,50],[77,87,33,53],[77,89,33,24],[77,90,29,0],[79,0,34,0],[79,6,34,4,"nextWatchId"],[79,17,34,15],[79,20,34,18],[79,21,34,0],[80,0,35,0],[80,6,35,4,"headingId"],[80,15,35,0],[82,0,36,0],[82,11,36,9,"_getNextWatchId"],[82,26,36,0],[82,29,36,27],[83,0,37,4,"nextWatchId"],[83,4,37,4,"nextWatchId"],[83,15,37,15],[84,0,38,4],[84,11,38,11,"nextWatchId"],[84,22,38,4],[85,0,39,1],[87,0,40,0],[87,11,40,9,"_getCurrentWatchId"],[87,29,40,0],[87,32,40,30],[88,0,41,4],[88,11,41,11,"nextWatchId"],[88,22,41,4],[89,0,42,1],[91,0,43,0],[91,6,43,4,"watchCallbacks"],[91,20,43,18],[91,23,43,21],[91,25,43,0],[92,0,44,0],[92,6,44,4,"deviceEventSubscription"],[92,29,44,0],[93,0,45,0],[93,6,45,4,"headingEventSub"],[93,21,45,0],[94,0,46,0],[94,6,46,4,"googleApiKey"],[94,18,46,0],[95,0,47,0],[95,6,47,6,"googleApiUrl"],[95,18,47,18],[95,21,47,21],[95,72,47,0],[97,0,48,7],[97,11,48,22,"getProviderStatusAsync"],[97,33,48,7],[98,0,48,7],[99,0,48,7],[100,0,48,7],[101,0,48,7],[102,0,48,7],[102,45,49,11,"ExpoLocation"],[102,67,49,24,"getProviderStatusAsync"],[102,89,49,11],[102,91,48,7],[104,0,48,7],[105,0,48,7],[106,0,48,7],[107,0,48,7],[108,0,48,7],[109,0,48,7],[110,0,48,7],[112,0,51,7],[112,11,51,22,"enableNetworkProviderAsync"],[112,37,51,7],[113,0,51,7],[114,0,51,7],[115,0,51,7],[116,0,51,7],[117,0,51,7],[117,18,56,8,"Platform"],[117,33,56,17,"OS"],[117,35,56,8],[117,40,56,24],[117,49,51,7],[118,0,51,7],[119,0,51,7],[120,0,51,7],[122,0,51,7],[122,46,57,15,"ExpoLocation"],[122,68,57,28,"enableNetworkProviderAsync"],[122,94,57,15],[122,96,51,7],[124,0,51,7],[125,0,51,7],[126,0,51,7],[127,0,51,7],[128,0,51,7],[129,0,51,7],[130,0,51,7],[132,0,60,7],[132,11,60,22,"getCurrentPositionAsync"],[132,34,60,7],[133,0,60,7],[134,0,60,7],[135,0,60,7],[136,0,60,7],[137,0,60,7],[138,0,60,7],[139,0,60,46,"options"],[139,12,60,46,"options"],[139,19,60,7],[139,81,60,56],[139,83,60,7],[140,0,60,7],[140,46,61,11,"ExpoLocation"],[140,68,61,24,"getCurrentPositionAsync"],[140,91,61,11],[140,92,61,48,"options"],[140,99,61,11],[140,100,60,7],[142,0,60,7],[143,0,60,7],[144,0,60,7],[145,0,60,7],[146,0,60,7],[147,0,60,7],[148,0,60,7],[150,0,66,7],[150,11,66,22,"getHeadingAsync"],[150,26,66,7],[151,0,66,7],[152,0,66,7],[153,0,66,7],[154,0,66,7],[155,0,66,7],[155,46,67,11],[155,50,67,15,"Promise"],[155,57,67,11],[155,58,67,23],[155,75,67,30,"resolve"],[155,82,67,23],[155,84,67,39,"reject"],[155,90,67,23],[156,0,67,23],[158,0,67,23],[159,0,67,23],[160,0,67,23],[161,0,67,23],[162,0,67,23],[164,0,67,23],[164,27,70,16,"headingEventSub"],[164,42,67,23],[165,0,67,23],[166,0,67,23],[167,0,67,23],[169,0,71,20,"tries"],[169,22,71,20,"tries"],[169,27,67,23],[169,30,71,28],[169,31,67,23],[170,0,72,22,"headingSub"],[170,22,72,22,"headingSub"],[170,32,67,23],[170,35,72,35,"LocationEventEmitter"],[170,55,72,55],[170,56,72,56,"addListener"],[170,67,72,35],[170,68,72,68],[170,89,72,35],[170,91,72,91],[170,107,72,108],[171,0,72,108],[171,28,72,94,"heading"],[171,35,72,108],[171,43,72,94,"heading"],[171,50,72,108],[173,0,73,20],[173,28,73,24,"heading"],[173,35,73,31],[173,36,73,32,"accuracy"],[173,44,73,24],[173,47,73,43],[173,48,73,24],[173,52,73,48,"tries"],[173,57,73,53],[173,60,73,56],[173,61,73,20],[173,63,73,59],[174,0,74,24,"resolve"],[174,26,74,24,"resolve"],[174,33,74,31],[174,34,74,32,"heading"],[174,41,74,31],[174,42,74,24],[175,0,75,24,"LocationEventEmitter"],[175,26,75,24,"LocationEventEmitter"],[175,46,75,44],[175,47,75,45,"removeSubscription"],[175,65,75,24],[175,66,75,64,"headingSub"],[175,76,75,24],[176,0,76,21],[176,25,73,20],[176,31,77,25],[177,0,78,24,"tries"],[177,26,78,24,"tries"],[177,31,78,29],[177,35,78,33],[177,36,78,24],[178,0,79,21],[179,0,80,17],[179,23,72,35],[179,24,67,23],[180,0,67,23],[181,0,67,23],[183,0,67,23],[184,0,83,20,"done"],[184,22,83,20,"done"],[184,26,67,23],[184,29,83,27],[184,34,67,23],[185,0,85,20,"tries"],[185,22,85,20,"tries"],[185,28,67,23],[185,31,85,28],[185,32,67,23],[186,0,67,23],[187,0,67,23],[187,56,86,37,"watchHeadingAsync"],[187,73,86,54],[187,74,86,55],[187,84,86,56,"heading"],[187,91,86,55],[187,93,86,68],[188,0,87,20],[188,28,87,24],[188,29,87,25,"done"],[188,33,87,20],[188,35,87,31],[189,0,88,24],[189,30,88,28,"heading"],[189,37,88,35],[189,38,88,36,"accuracy"],[189,46,88,28],[189,49,88,47],[189,50,88,28],[189,54,88,52,"tries"],[189,60,88,57],[189,63,88,60],[189,64,88,24],[189,66,88,63],[190,0,89,28,"subscription"],[190,28,89,28,"subscription"],[190,40,89,40],[190,41,89,41,"remove"],[190,47,89,28],[191,0,90,28,"resolve"],[191,28,90,28,"resolve"],[191,35,90,35],[191,36,90,36,"heading"],[191,43,90,35],[191,44,90,28],[192,0,91,28,"done"],[192,28,91,28,"done"],[192,32,91,32],[192,35,91,35],[192,39,91,28],[193,0,92,25],[193,27,88,24],[193,33,93,29],[194,0,94,28,"tries"],[194,28,94,28,"tries"],[194,34,94,33],[194,38,94,37],[194,39,94,28],[195,0,95,25],[196,0,96,21],[196,25,87,20],[196,31,97,25],[197,0,98,24,"subscription"],[197,26,98,24,"subscription"],[197,38,98,36],[197,39,98,37,"remove"],[197,45,98,24],[198,0,99,21],[199,0,100,17],[199,23,86,54],[199,24,67,23],[201,0,67,23],[202,0,86,16,"subscription"],[202,22,86,16,"subscription"],[202,34,67,23],[204,0,101,16],[204,26,101,20,"done"],[204,30,101,16],[204,32,101,26],[205,0,102,20,"subscription"],[205,24,102,20,"subscription"],[205,36,102,32],[205,37,102,33,"remove"],[205,43,102,20],[206,0,103,17],[208,0,67,23],[209,0,67,23],[210,0,67,23],[212,0,67,23],[213,0,67,23],[214,0,67,23],[215,0,107,12,"reject"],[215,22,107,12,"reject"],[215,28,107,18],[215,42,107,12],[217,0,67,23],[218,0,67,23],[219,0,67,23],[220,0,67,23],[221,0,67,23],[222,0,67,23],[223,0,67,23],[223,13,67,11],[223,14,66,7],[225,0,66,7],[226,0,66,7],[227,0,66,7],[228,0,66,7],[229,0,66,7],[230,0,66,7],[231,0,66,7],[233,0,111,7],[233,11,111,22,"watchHeadingAsync"],[233,28,111,7],[233,29,111,40,"callback"],[233,37,111,7],[234,0,111,7],[235,0,111,7],[236,0,111,7],[237,0,111,7],[238,0,113,4],[238,16,113,8,"headingEventSub"],[238,31,113,4],[238,33,113,25],[239,0,114,8,"_removeHeadingWatcher"],[239,14,114,8,"_removeHeadingWatcher"],[239,35,114,29],[239,36,114,30,"headingId"],[239,45,114,29],[239,46,114,8],[240,0,115,5],[242,0,116,4,"headingEventSub"],[242,12,116,4,"headingEventSub"],[242,27,116,19],[242,30,116,22,"LocationEventEmitter"],[242,50,116,42],[242,51,116,43,"addListener"],[242,62,116,22],[242,63,116,55],[242,84,116,22],[242,86,116,78],[242,103,116,104],[243,0,116,104],[243,18,116,81,"watchId"],[243,25,116,104],[243,34,116,81,"watchId"],[243,41,116,104],[244,0,116,104],[244,18,116,90,"heading"],[244,25,116,104],[244,34,116,90,"heading"],[244,41,116,104],[245,0,117,8],[245,18,117,14,"callback"],[245,26,117,22],[245,29,117,25,"watchCallbacks"],[245,43,117,39],[245,44,117,40,"watchId"],[245,51,117,39],[245,52,117,8],[247,0,118,8],[247,18,118,12,"callback"],[247,26,118,8],[247,28,118,22],[248,0,119,12,"callback"],[248,16,119,12,"callback"],[248,24,119,20],[248,25,119,21,"heading"],[248,32,119,20],[248,33,119,12],[249,0,120,9],[249,15,118,8],[249,21,121,13],[250,0,122,12,"ExpoLocation"],[250,38,122,25,"removeWatchAsync"],[250,54,122,12],[250,55,122,42,"watchId"],[250,62,122,12],[251,0,123,9],[252,0,124,5],[252,13,116,22],[252,14,116,4],[253,0,125,4,"headingId"],[253,12,125,4,"headingId"],[253,21,125,13],[253,24,125,16,"_getNextWatchId"],[253,39,125,31],[253,41,125,4],[254,0,126,4,"watchCallbacks"],[254,12,126,4,"watchCallbacks"],[254,26,126,18],[254,27,126,19,"headingId"],[254,36,126,18],[254,37,126,4],[254,40,126,32,"callback"],[254,48,126,4],[255,0,111,7],[256,0,111,7],[256,46,127,10,"ExpoLocation"],[256,68,127,23,"watchDeviceHeading"],[256,86,127,10],[256,87,127,42,"headingId"],[256,96,127,10],[256,97,111,7],[258,0,111,7],[259,0,111,7],[259,46,128,11],[260,0,129,8,"remove"],[260,14,129,8,"remove"],[260,20,128,11],[260,40,129,17],[261,0,130,12,"_removeHeadingWatcher"],[261,16,130,12,"_removeHeadingWatcher"],[261,37,130,33],[261,38,130,34,"headingId"],[261,47,130,33],[261,48,130,12],[262,0,131,9],[263,0,128,11],[263,13,111,7],[265,0,111,7],[266,0,111,7],[267,0,111,7],[268,0,111,7],[269,0,111,7],[270,0,111,7],[271,0,111,7],[273,0,135,0],[273,11,135,9,"_removeHeadingWatcher"],[273,32,135,0],[273,33,135,31,"watchId"],[273,40,135,0],[273,42,135,40],[274,0,136,4],[274,8,136,8],[274,9,136,9,"watchCallbacks"],[274,23,136,23],[274,24,136,24,"watchId"],[274,31,136,23],[274,32,136,4],[274,34,136,34],[275,0,137,8],[276,0,138,5],[278,0,139,4],[278,11,139,11,"watchCallbacks"],[278,25,139,25],[278,26,139,26,"watchId"],[278,33,139,25],[278,34,139,4],[280,0,140,4,"ExpoLocation"],[280,26,140,17,"removeWatchAsync"],[280,42,140,4],[280,43,140,34,"watchId"],[280,50,140,4],[282,0,141,4],[282,8,141,8,"headingEventSub"],[282,23,141,4],[282,25,141,25],[283,0,142,8,"LocationEventEmitter"],[283,6,142,8,"LocationEventEmitter"],[283,26,142,28],[283,27,142,29,"removeSubscription"],[283,45,142,8],[283,46,142,48,"headingEventSub"],[283,61,142,8],[284,0,143,8,"headingEventSub"],[284,6,143,8,"headingEventSub"],[284,21,143,23],[284,24,143,26],[284,28,143,8],[285,0,144,5],[286,0,145,1],[288,0,147,0],[288,11,147,9,"_maybeInitializeEmitterSubscription"],[288,46,147,0],[288,49,147,47],[289,0,148,4],[289,8,148,8],[289,9,148,9,"deviceEventSubscription"],[289,32,148,4],[289,34,148,34],[290,0,149,8,"deviceEventSubscription"],[290,6,149,8,"deviceEventSubscription"],[290,29,149,31],[290,32,149,34,"LocationEventEmitter"],[290,52,149,54],[290,53,149,55,"addListener"],[290,64,149,34],[290,65,149,67],[290,87,149,34],[290,89,149,91],[290,106,149,118],[291,0,149,118],[291,12,149,94,"watchId"],[291,19,149,118],[291,28,149,94,"watchId"],[291,35,149,118],[292,0,149,118],[292,12,149,103,"location"],[292,20,149,118],[292,29,149,103,"location"],[292,37,149,118],[293,0,150,12],[293,12,150,18,"callback"],[293,20,150,26],[293,23,150,29,"watchCallbacks"],[293,37,150,43],[293,38,150,44,"watchId"],[293,45,150,43],[293,46,150,12],[295,0,151,12],[295,12,151,16,"callback"],[295,20,151,12],[295,22,151,26],[296,0,152,16,"callback"],[296,10,152,16,"callback"],[296,18,152,24],[296,19,152,25,"location"],[296,27,152,24],[296,28,152,16],[297,0,153,13],[297,9,151,12],[297,15,154,17],[298,0,155,16,"ExpoLocation"],[298,32,155,29,"removeWatchAsync"],[298,48,155,16],[298,49,155,46,"watchId"],[298,56,155,16],[299,0,156,13],[300,0,157,9],[300,7,149,34],[300,8,149,8],[301,0,158,5],[302,0,159,1],[304,0,160,7],[304,11,160,22,"geocodeAsync"],[304,23,160,7],[304,24,160,35,"address"],[304,31,160,7],[305,0,160,7],[306,0,160,7],[307,0,160,7],[308,0,160,7],[309,0,160,7],[309,46,161,11,"ExpoLocation"],[309,68,161,24,"geocodeAsync"],[309,80,161,11],[309,81,161,37,"address"],[309,88,161,11],[309,90,161,46,"catch"],[309,95,161,11],[309,96,161,52],[309,106,161,52,"error"],[309,111,161,57],[309,113,161,61],[310,0,162,8],[310,18,162,14,"platformUsesGoogleMaps"],[310,40,162,36],[310,43,162,39,"Platform"],[310,58,162,48,"OS"],[310,60,162,39],[310,65,162,55],[310,74,162,39],[310,78,162,68,"Platform"],[310,93,162,77,"OS"],[310,95,162,68],[310,100,162,84],[310,105,162,8],[312,0,163,8],[312,18,163,12,"platformUsesGoogleMaps"],[312,40,163,34],[312,44,163,38,"error"],[312,49,163,43],[312,50,163,44,"code"],[312,54,163,38],[312,59,163,53],[312,74,163,8],[312,76,163,70],[313,0,164,12],[313,20,164,16],[313,21,164,17,"googleApiKey"],[313,33,164,12],[313,35,164,31],[314,0,165,16],[314,24,165,22],[314,28,165,26,"CodedError"],[314,44,165,22],[314,45,165,37,"error"],[314,50,165,42],[314,51,165,43,"code"],[314,55,165,22],[314,57,165,52,"error"],[314,62,165,57],[314,63,165,58,"message"],[314,70,165,22],[314,122,165,16],[315,0,166,13],[317,0,167,12],[317,23,167,19,"_googleGeocodeAsync"],[317,42,167,38],[317,43,167,39,"address"],[317,50,167,38],[317,51,167,12],[318,0,168,9],[320,0,169,8],[320,20,169,14,"error"],[320,25,169,8],[321,0,170,5],[321,13,161,11],[321,14,160,7],[323,0,160,7],[324,0,160,7],[325,0,160,7],[326,0,160,7],[327,0,160,7],[328,0,160,7],[329,0,160,7],[331,0,172,7],[331,11,172,22,"reverseGeocodeAsync"],[331,30,172,7],[331,31,172,42,"location"],[331,39,172,7],[332,0,172,7],[333,0,172,7],[334,0,172,7],[335,0,172,7],[336,0,172,7],[336,18,173,8],[336,25,173,15,"location"],[336,33,173,23],[336,34,173,24,"latitude"],[336,42,173,8],[336,47,173,37],[336,55,173,8],[336,59,173,49],[336,66,173,56,"location"],[336,74,173,64],[336,75,173,65,"longitude"],[336,84,173,49],[336,89,173,79],[336,97,172,7],[337,0,172,7],[338,0,172,7],[339,0,172,7],[341,0,172,7],[341,18,174,14],[341,22,174,18,"TypeError"],[341,31,174,14],[341,32,174,28],[341,113,174,14],[341,114,172,7],[343,0,172,7],[344,0,172,7],[344,46,176,11,"ExpoLocation"],[344,68,176,24,"reverseGeocodeAsync"],[344,87,176,11],[344,88,176,44,"location"],[344,96,176,11],[344,98,176,54,"catch"],[344,103,176,11],[344,104,176,60],[344,114,176,60,"error"],[344,119,176,65],[344,121,176,69],[345,0,177,8],[345,18,177,14,"platformUsesGoogleMaps"],[345,40,177,36],[345,43,177,39,"Platform"],[345,58,177,48,"OS"],[345,60,177,39],[345,65,177,55],[345,74,177,39],[345,78,177,68,"Platform"],[345,93,177,77,"OS"],[345,95,177,68],[345,100,177,84],[345,105,177,8],[347,0,178,8],[347,18,178,12,"platformUsesGoogleMaps"],[347,40,178,34],[347,44,178,38,"error"],[347,49,178,43],[347,50,178,44,"code"],[347,54,178,38],[347,59,178,53],[347,74,178,8],[347,76,178,70],[348,0,179,12],[348,20,179,16],[348,21,179,17,"googleApiKey"],[348,33,179,12],[348,35,179,31],[349,0,180,16],[349,24,180,22],[349,28,180,26,"CodedError"],[349,44,180,22],[349,45,180,37,"error"],[349,50,180,42],[349,51,180,43,"code"],[349,55,180,22],[349,57,180,52,"error"],[349,62,180,57],[349,63,180,58,"message"],[349,70,180,22],[349,122,180,16],[350,0,181,13],[352,0,182,12],[352,23,182,19,"_googleReverseGeocodeAsync"],[352,49,182,45],[352,50,182,46,"location"],[352,58,182,45],[352,59,182,12],[353,0,183,9],[355,0,184,8],[355,20,184,14,"error"],[355,25,184,8],[356,0,185,5],[356,13,176,11],[356,14,172,7],[358,0,172,7],[359,0,172,7],[360,0,172,7],[361,0,172,7],[362,0,172,7],[363,0,172,7],[364,0,172,7],[366,0,187,7],[366,11,187,16,"setApiKey"],[366,20,187,7],[366,21,187,26,"apiKey"],[366,27,187,7],[366,29,187,34],[367,0,188,4,"googleApiKey"],[367,4,188,4,"googleApiKey"],[367,16,188,16],[367,19,188,19,"apiKey"],[367,25,188,4],[368,0,189,1],[370,0,190,0],[370,11,190,15,"_googleGeocodeAsync"],[370,30,190,0],[370,31,190,35,"address"],[370,38,190,0],[371,0,190,0],[372,0,190,0],[373,0,190,0],[374,0,190,0],[375,0,190,0],[376,0,190,0],[377,0,190,0],[377,46,191,25,"fetch"],[377,51,191,30],[377,52,191,34,"googleApiUrl"],[377,64,191,30],[377,77,191,54,"googleApiKey"],[377,89,191,30],[377,106,191,78,"encodeURI"],[377,115,191,87],[377,116,191,88,"address"],[377,123,191,87],[377,124,191,30],[377,125,190,0],[379,0,190,0],[380,0,191,10,"result"],[380,12,191,10,"result"],[380,18,190,0],[381,0,190,0],[382,0,190,0],[382,46,192,31,"result"],[382,52,192,37],[382,53,192,38,"json"],[382,57,192,31],[382,59,190,0],[384,0,190,0],[385,0,192,10,"resultObject"],[385,12,192,10,"resultObject"],[385,24,190,0],[387,0,190,0],[387,18,193,8,"resultObject"],[387,30,193,20],[387,31,193,21,"status"],[387,37,193,8],[387,42,193,32],[387,56,190,0],[388,0,190,0],[389,0,190,0],[390,0,190,0],[392,0,190,0],[392,46,194,15],[392,48,190,0],[394,0,190,0],[395,0,196,4,"assertGeocodeResults"],[395,12,196,4,"assertGeocodeResults"],[395,32,196,24],[395,33,196,25,"resultObject"],[395,45,196,24],[395,46,196,4],[396,0,190,0],[396,46,197,11,"resultObject"],[396,58,197,23],[396,59,197,24,"results"],[396,66,197,11],[396,67,197,32,"map"],[396,70,197,11],[396,71,197,36],[396,81,197,36,"result"],[396,87,197,42],[396,89,197,46],[397,0,198,8],[397,18,198,12,"location"],[397,26,198,20],[397,29,198,23,"result"],[397,35,198,29],[397,36,198,30,"geometry"],[397,44,198,23],[397,45,198,39,"location"],[397,53,198,8],[398,0,200,8],[398,21,200,15],[399,0,201,12,"latitude"],[399,16,201,12,"latitude"],[399,24,201,20],[399,26,201,22,"location"],[399,34,201,30],[399,35,201,31,"lat"],[399,38,200,15],[400,0,202,12,"longitude"],[400,16,202,12,"longitude"],[400,25,202,21],[400,27,202,23,"location"],[400,35,202,31],[400,36,202,32,"lng"],[401,0,200,15],[401,15,200,8],[402,0,204,5],[402,13,197,11],[402,14,190,0],[404,0,190,0],[405,0,190,0],[406,0,190,0],[407,0,190,0],[408,0,190,0],[409,0,190,0],[410,0,190,0],[412,0,206,0],[412,11,206,15,"_googleReverseGeocodeAsync"],[412,37,206,0],[412,38,206,42,"options"],[412,45,206,0],[413,0,206,0],[414,0,206,0],[415,0,206,0],[416,0,206,0],[417,0,206,0],[418,0,206,0],[419,0,206,0],[419,46,207,25,"fetch"],[419,51,207,30],[419,52,207,34,"googleApiUrl"],[419,64,207,30],[419,77,207,54,"googleApiKey"],[419,89,207,30],[419,105,207,77,"options"],[419,112,207,84],[419,113,207,85,"latitude"],[419,121,207,30],[419,130,207,97,"options"],[419,137,207,104],[419,138,207,105,"longitude"],[419,147,207,30],[419,148,206,0],[421,0,206,0],[422,0,207,10,"result"],[422,12,207,10,"result"],[422,18,206,0],[423,0,206,0],[424,0,206,0],[424,46,208,31,"result"],[424,52,208,37],[424,53,208,38,"json"],[424,57,208,31],[424,59,206,0],[426,0,206,0],[427,0,208,10,"resultObject"],[427,12,208,10,"resultObject"],[427,24,206,0],[429,0,206,0],[429,18,209,8,"resultObject"],[429,30,209,20],[429,31,209,21,"status"],[429,37,209,8],[429,42,209,32],[429,56,206,0],[430,0,206,0],[431,0,206,0],[432,0,206,0],[434,0,206,0],[434,47,210,15],[434,49,206,0],[436,0,206,0],[437,0,212,4,"assertGeocodeResults"],[437,12,212,4,"assertGeocodeResults"],[437,32,212,24],[437,33,212,25,"resultObject"],[437,45,212,24],[437,46,212,4],[438,0,206,0],[438,47,213,11,"resultObject"],[438,59,213,23],[438,60,213,24,"results"],[438,67,213,11],[438,68,213,32,"map"],[438,71,213,11],[438,72,213,36],[438,82,213,36,"result"],[438,88,213,42],[438,90,213,46],[439,0,214,8],[439,18,214,14,"address"],[439,25,214,21],[439,28,214,24],[439,30,214,8],[440,0,215,8,"result"],[440,14,215,8,"result"],[440,20,215,14],[440,21,215,15,"address_components"],[440,39,215,8],[440,40,215,34,"forEach"],[440,47,215,8],[440,48,215,42],[440,58,215,42,"component"],[440,67,215,51],[440,69,215,55],[441,0,216,12],[441,20,216,16,"component"],[441,29,216,25],[441,30,216,26,"types"],[441,35,216,16],[441,36,216,32,"includes"],[441,44,216,16],[441,45,216,41],[441,55,216,16],[441,56,216,12],[441,58,216,54],[442,0,217,16,"address"],[442,18,217,16,"address"],[442,25,217,23],[442,26,217,24,"city"],[442,30,217,16],[442,33,217,31,"component"],[442,42,217,40],[442,43,217,41,"long_name"],[442,52,217,16],[443,0,218,13],[443,17,216,12],[443,23,219,17],[443,27,219,21,"component"],[443,36,219,30],[443,37,219,31,"types"],[443,42,219,21],[443,43,219,37,"includes"],[443,51,219,21],[443,52,219,46],[443,68,219,21],[443,69,219,17],[443,71,219,65],[444,0,220,16,"address"],[444,18,220,16,"address"],[444,25,220,23],[444,26,220,24,"street"],[444,32,220,16],[444,35,220,33,"component"],[444,44,220,42],[444,45,220,43,"long_name"],[444,54,220,16],[445,0,221,13],[445,17,219,17],[445,23,222,17],[445,27,222,21,"component"],[445,36,222,30],[445,37,222,31,"types"],[445,42,222,21],[445,43,222,37,"includes"],[445,51,222,21],[445,52,222,46],[445,81,222,21],[445,82,222,17],[445,84,222,78],[446,0,223,16,"address"],[446,18,223,16,"address"],[446,25,223,23],[446,26,223,24,"region"],[446,32,223,16],[446,35,223,33,"component"],[446,44,223,42],[446,45,223,43,"long_name"],[446,54,223,16],[447,0,224,13],[447,17,222,17],[447,23,225,17],[447,27,225,21,"component"],[447,36,225,30],[447,37,225,31,"types"],[447,42,225,21],[447,43,225,37,"includes"],[447,51,225,21],[447,52,225,46],[447,61,225,21],[447,62,225,17],[447,64,225,58],[448,0,226,16,"address"],[448,18,226,16,"address"],[448,25,226,23],[448,26,226,24,"country"],[448,33,226,16],[448,36,226,34,"component"],[448,45,226,43],[448,46,226,44,"long_name"],[448,55,226,16],[449,0,227,13],[449,17,225,17],[449,23,228,17],[449,27,228,21,"component"],[449,36,228,30],[449,37,228,31,"types"],[449,42,228,21],[449,43,228,37,"includes"],[449,51,228,21],[449,52,228,46],[449,65,228,21],[449,66,228,17],[449,68,228,62],[450,0,229,16,"address"],[450,18,229,16,"address"],[450,25,229,23],[450,26,229,24,"postalCode"],[450,36,229,16],[450,39,229,37,"component"],[450,48,229,46],[450,49,229,47,"long_name"],[450,58,229,16],[451,0,230,13],[451,17,228,17],[451,23,231,17],[451,27,231,21,"component"],[451,36,231,30],[451,37,231,31,"types"],[451,42,231,21],[451,43,231,37,"includes"],[451,51,231,21],[451,52,231,46],[451,71,231,21],[451,72,231,17],[451,74,231,68],[452,0,232,16,"address"],[452,18,232,16,"address"],[452,25,232,23],[452,26,232,24,"name"],[452,30,232,16],[452,33,232,31,"component"],[452,42,232,40],[452,43,232,41,"long_name"],[452,52,232,16],[453,0,233,13],[454,0,234,9],[454,15,215,8],[455,0,235,8],[455,21,235,15,"address"],[455,28,235,8],[456,0,236,5],[456,13,213,11],[456,14,206,0],[458,0,206,0],[459,0,206,0],[460,0,206,0],[461,0,206,0],[462,0,206,0],[463,0,206,0],[464,0,206,0],[466,0,239,0],[466,11,239,9,"assertGeocodeResults"],[466,31,239,0],[466,32,239,30,"resultObject"],[466,44,239,0],[466,46,239,44],[467,0,239,44],[467,8,240,12,"status"],[467,14,239,44],[467,17,240,38,"resultObject"],[467,29,239,44],[467,30,240,12,"status"],[467,36,239,44],[468,0,239,44],[468,8,240,20,"error_message"],[468,21,239,44],[468,24,240,38,"resultObject"],[468,36,239,44],[468,37,240,20,"error_message"],[468,50,239,44],[470,0,241,4],[470,8,241,8,"status"],[470,14,241,14],[470,19,241,19],[470,33,241,8],[470,37,241,37,"status"],[470,43,241,43],[470,48,241,48],[470,52,241,4],[470,54,241,54],[471,0,242,8],[471,10,242,12,"error_message"],[471,23,242,8],[471,25,242,27],[472,0,243,12],[472,14,243,18],[472,18,243,22,"CodedError"],[472,34,243,18],[472,35,243,33,"status"],[472,41,243,18],[472,43,243,41,"error_message"],[472,56,243,18],[472,57,243,12],[473,0,244,9],[473,7,242,8],[473,13,245,13],[473,17,245,17,"status"],[473,23,245,23],[473,28,245,28],[473,43,245,13],[473,45,245,45],[474,0,246,12],[474,14,246,18],[474,18,246,22,"CodedError"],[474,34,246,18],[474,35,246,33,"status"],[474,41,246,18],[474,43,246,41],[474,144,246,18],[474,145,246,12],[475,0,247,9],[477,0,248,8],[477,12,248,14],[477,16,248,18,"CodedError"],[477,32,248,14],[477,33,248,29,"status"],[477,39,248,14],[477,79,248,8],[478,0,249,5],[479,0,250,1],[481,0,252,0],[481,11,252,9,"watchPosition"],[481,24,252,0],[481,25,252,23,"success"],[481,32,252,0],[481,34,252,32,"error"],[481,39,252,0],[481,41,252,39,"options"],[481,48,252,0],[481,50,252,48],[482,0,253,4,"_maybeInitializeEmitterSubscription"],[482,4,253,4,"_maybeInitializeEmitterSubscription"],[482,39,253,39],[484,0,254,4],[484,8,254,10,"watchId"],[484,15,254,17],[484,18,254,20,"_getNextWatchId"],[484,33,254,35],[484,35,254,4],[486,0,255,4,"watchCallbacks"],[486,4,255,4,"watchCallbacks"],[486,18,255,18],[486,19,255,19,"watchId"],[486,26,255,18],[486,27,255,4],[486,30,255,30,"success"],[486,37,255,4],[488,0,256,4,"ExpoLocation"],[488,26,256,17,"watchPositionImplAsync"],[488,48,256,4],[488,49,256,40,"watchId"],[488,56,256,4],[488,58,256,49,"options"],[488,65,256,4],[488,67,256,58,"catch"],[488,72,256,4],[488,73,256,64],[488,83,256,64,"err"],[488,86,256,67],[488,88,256,71],[489,0,257,8,"_removeWatcher"],[489,6,257,8,"_removeWatcher"],[489,20,257,22],[489,21,257,23,"watchId"],[489,28,257,22],[489,29,257,8],[491,0,258,8,"error"],[491,6,258,8,"error"],[491,11,258,13],[491,12,258,14],[492,0,258,16,"watchId"],[492,8,258,16,"watchId"],[492,15,258,23],[492,17,258,16,"watchId"],[492,24,258,14],[493,0,258,25,"message"],[493,8,258,25,"message"],[493,15,258,32],[493,17,258,34,"err"],[493,20,258,37],[493,21,258,38,"message"],[493,28,258,14],[494,0,258,47,"code"],[494,8,258,47,"code"],[494,12,258,51],[494,14,258,53,"err"],[494,17,258,56],[494,18,258,57,"code"],[495,0,258,14],[495,7,258,13],[495,8,258,8],[496,0,259,5],[496,5,256,4],[498,0,260,4],[498,11,260,11,"watchId"],[498,18,260,4],[499,0,261,1],[501,0,262,7],[501,11,262,22,"watchPositionAsync"],[501,29,262,7],[501,30,262,41,"options"],[501,37,262,7],[501,39,262,50,"callback"],[501,47,262,7],[502,0,262,7],[503,0,262,7],[504,0,262,7],[505,0,262,7],[506,0,262,7],[507,0,263,4,"_maybeInitializeEmitterSubscription"],[507,12,263,4,"_maybeInitializeEmitterSubscription"],[507,47,263,39],[509,0,264,10,"watchId"],[509,12,264,10,"watchId"],[509,19,262,7],[509,22,264,20,"_getNextWatchId"],[509,37,264,35],[509,39,262,7],[510,0,265,4,"watchCallbacks"],[510,12,265,4,"watchCallbacks"],[510,26,265,18],[510,27,265,19,"watchId"],[510,34,265,18],[510,35,265,4],[510,38,265,30,"callback"],[510,46,265,4],[511,0,262,7],[512,0,262,7],[512,46,266,10,"ExpoLocation"],[512,68,266,23,"watchPositionImplAsync"],[512,90,266,10],[512,91,266,46,"watchId"],[512,98,266,10],[512,100,266,55,"options"],[512,107,266,10],[512,108,262,7],[514,0,262,7],[515,0,262,7],[515,47,267,11],[516,0,268,8,"remove"],[516,14,268,8,"remove"],[516,20,267,11],[516,40,268,17],[517,0,269,12,"_removeWatcher"],[517,16,269,12,"_removeWatcher"],[517,30,269,26],[517,31,269,27,"watchId"],[517,38,269,26],[517,39,269,12],[518,0,270,9],[519,0,267,11],[519,13,262,7],[521,0,262,7],[522,0,262,7],[523,0,262,7],[524,0,262,7],[525,0,262,7],[526,0,262,7],[527,0,262,7],[529,0,274,0],[529,11,274,9,"clearWatch"],[529,21,274,0],[529,22,274,20,"watchId"],[529,29,274,0],[529,31,274,29],[530,0,275,4,"_removeWatcher"],[530,4,275,4,"_removeWatcher"],[530,18,275,18],[530,19,275,19,"watchId"],[530,26,275,18],[530,27,275,4],[531,0,276,1],[533,0,277,0],[533,11,277,9,"_removeWatcher"],[533,25,277,0],[533,26,277,24,"watchId"],[533,33,277,0],[533,35,277,33],[534,0,279,4],[534,8,279,8],[534,9,279,9,"watchCallbacks"],[534,23,279,23],[534,24,279,24,"watchId"],[534,31,279,23],[534,32,279,4],[534,34,279,34],[535,0,280,8],[536,0,281,5],[538,0,282,4,"ExpoLocation"],[538,26,282,17,"removeWatchAsync"],[538,42,282,4],[538,43,282,34,"watchId"],[538,50,282,4],[540,0,283,4],[540,11,283,11,"watchCallbacks"],[540,25,283,25],[540,26,283,26,"watchId"],[540,33,283,25],[540,34,283,4],[542,0,284,4],[542,8,284,8,"Object"],[542,14,284,14],[542,15,284,15,"keys"],[542,19,284,8],[542,20,284,20,"watchCallbacks"],[542,34,284,8],[542,36,284,36,"length"],[542,42,284,8],[542,47,284,47],[542,48,284,8],[542,52,284,52,"deviceEventSubscription"],[542,75,284,4],[542,77,284,77],[543,0,285,8,"LocationEventEmitter"],[543,6,285,8,"LocationEventEmitter"],[543,26,285,28],[543,27,285,29,"removeSubscription"],[543,45,285,8],[543,46,285,48,"deviceEventSubscription"],[543,69,285,8],[544,0,286,8,"deviceEventSubscription"],[544,6,286,8,"deviceEventSubscription"],[544,29,286,31],[544,32,286,34],[544,36,286,8],[545,0,287,5],[546,0,288,1],[548,0,289,0],[548,11,289,9,"getCurrentPosition"],[548,29,289,0],[548,30,289,28,"success"],[548,37,289,0],[548,39,289,70],[549,0,289,70],[549,8,289,37,"error"],[549,13,289,70],[549,84,289,45],[549,96,289,51],[549,97,289,54],[549,98,289,70],[550,0,289,70],[550,8,289,56,"options"],[550,15,289,70],[550,86,289,66],[550,88,289,70],[551,0,290,4],[551,28,290,14],[551,35,290,21,"success"],[551,42,290,14],[551,47,290,33],[551,57,290,4],[551,59,290,45],[551,99,290,4],[552,0,291,4],[552,28,291,14],[552,35,291,21,"options"],[552,42,291,14],[552,47,291,33],[552,55,291,4],[552,57,291,43],[552,85,291,4],[554,0,292,4,"_getCurrentPositionAsyncWrapper"],[554,4,292,4,"_getCurrentPositionAsyncWrapper"],[554,35,292,35],[554,36,292,36,"success"],[554,43,292,35],[554,45,292,45,"error"],[554,50,292,35],[554,52,292,52,"options"],[554,59,292,35],[554,60,292,4],[555,0,293,1],[557,0,296,0],[557,11,296,15,"_getCurrentPositionAsyncWrapper"],[557,42,296,0],[557,43,296,47,"success"],[557,50,296,0],[557,52,296,56,"error"],[557,57,296,0],[557,59,296,63,"options"],[557,66,296,0],[558,0,296,0],[559,0,296,0],[560,0,296,0],[561,0,296,0],[562,0,296,0],[563,0,296,0],[564,0,296,0],[565,0,296,0],[565,46,298,14,"ExpoLocation"],[565,68,298,27,"requestPermissionsAsync"],[565,91,298,14],[565,93,296,0],[567,0,296,0],[568,0,296,0],[569,0,296,0],[569,46,299,29,"getCurrentPositionAsync"],[569,69,299,52],[569,70,299,53,"options"],[569,77,299,52],[569,78,296,0],[571,0,296,0],[572,0,299,14,"result"],[572,12,299,14,"result"],[572,18,296,0],[573,0,300,8,"success"],[573,12,300,8,"success"],[573,19,300,15],[573,20,300,16,"result"],[573,26,300,15],[573,27,300,8],[574,0,296,0],[575,0,296,0],[577,0,296,0],[578,0,296,0],[579,0,296,0],[580,0,303,8,"error"],[580,12,303,8,"error"],[580,17,303,13],[580,32,303,8],[582,0,296,0],[583,0,296,0],[584,0,296,0],[585,0,296,0],[586,0,296,0],[587,0,296,0],[588,0,296,0],[590,0,306,7],[590,11,306,22,"requestPermissionsAsync"],[590,34,306,7],[591,0,306,7],[592,0,306,7],[593,0,306,7],[594,0,306,7],[595,0,306,7],[596,0,306,7],[596,46,307,10,"ExpoLocation"],[596,68,307,23,"requestPermissionsAsync"],[596,91,307,10],[596,93,306,7],[598,0,306,7],[599,0,306,7],[600,0,306,7],[601,0,306,7],[602,0,306,7],[603,0,306,7],[604,0,306,7],[606,0,310,7],[606,11,310,22,"hasServicesEnabledAsync"],[606,34,310,7],[607,0,310,7],[608,0,310,7],[609,0,310,7],[610,0,310,7],[611,0,310,7],[612,0,310,7],[612,46,311,17,"ExpoLocation"],[612,68,311,30,"hasServicesEnabledAsync"],[612,91,311,17],[612,93,310,7],[614,0,310,7],[615,0,310,7],[617,0,310,7],[618,0,310,7],[619,0,310,7],[620,0,310,7],[621,0,310,7],[622,0,310,7],[623,0,310,7],[625,0,314,0],[625,11,314,9,"_validateTaskName"],[625,28,314,0],[625,29,314,27,"taskName"],[625,37,314,0],[625,39,314,37],[626,0,315,4],[626,28,315,14,"taskName"],[626,36,315,22],[626,40,315,26],[626,47,315,33,"taskName"],[626,55,315,26],[626,60,315,46],[626,68,315,4],[626,70,315,56],[626,110,315,4],[627,0,316,1],[629,0,317,7],[629,11,317,22,"isBackgroundLocationAvailableAsync"],[629,45,317,7],[630,0,317,7],[631,0,317,7],[632,0,317,7],[633,0,317,7],[634,0,317,7],[635,0,317,7],[636,0,317,7],[636,46,318,33,"getProviderStatusAsync"],[636,68,318,55],[636,70,317,7],[638,0,317,7],[639,0,318,10,"providerStatus"],[639,12,318,10,"providerStatus"],[639,26,317,7],[640,0,317,7],[640,47,319,11,"providerStatus"],[640,61,319,25],[640,62,319,26,"backgroundModeEnabled"],[640,83,317,7],[642,0,317,7],[643,0,317,7],[644,0,317,7],[645,0,317,7],[646,0,317,7],[647,0,317,7],[648,0,317,7],[650,0,321,7],[650,11,321,22,"startLocationUpdatesAsync"],[650,36,321,7],[650,37,321,48,"taskName"],[650,45,321,7],[651,0,321,7],[652,0,321,7],[653,0,321,7],[654,0,321,7],[655,0,321,7],[656,0,321,7],[657,0,321,58,"options"],[657,12,321,58,"options"],[657,19,321,7],[657,84,321,68],[658,0,321,70,"accuracy"],[658,14,321,70,"accuracy"],[658,22,321,78],[658,24,321,80,"LocationAccuracy"],[658,40,321,96],[658,41,321,97,"Balanced"],[659,0,321,68],[659,13,321,7],[661,0,322,4,"_validateTaskName"],[661,12,322,4,"_validateTaskName"],[661,29,322,21],[661,30,322,22,"taskName"],[661,38,322,21],[661,39,322,4],[663,0,321,7],[664,0,321,7],[664,46,323,10,"ExpoLocation"],[664,68,323,23,"startLocationUpdatesAsync"],[664,93,323,10],[664,94,323,49,"taskName"],[664,102,323,10],[664,104,323,59,"options"],[664,111,323,10],[664,112,321,7],[666,0,321,7],[667,0,321,7],[668,0,321,7],[669,0,321,7],[670,0,321,7],[671,0,321,7],[672,0,321,7],[674,0,325,7],[674,11,325,22,"stopLocationUpdatesAsync"],[674,35,325,7],[674,36,325,47,"taskName"],[674,44,325,7],[675,0,325,7],[676,0,325,7],[677,0,325,7],[678,0,325,7],[679,0,326,4,"_validateTaskName"],[679,12,326,4,"_validateTaskName"],[679,29,326,21],[679,30,326,22,"taskName"],[679,38,326,21],[679,39,326,4],[681,0,325,7],[682,0,325,7],[682,46,327,10,"ExpoLocation"],[682,68,327,23,"stopLocationUpdatesAsync"],[682,92,327,10],[682,93,327,48,"taskName"],[682,101,327,10],[682,102,325,7],[684,0,325,7],[685,0,325,7],[686,0,325,7],[687,0,325,7],[688,0,325,7],[689,0,325,7],[690,0,325,7],[692,0,329,7],[692,11,329,22,"hasStartedLocationUpdatesAsync"],[692,41,329,7],[692,42,329,53,"taskName"],[692,50,329,7],[693,0,329,7],[694,0,329,7],[695,0,329,7],[696,0,329,7],[697,0,330,4,"_validateTaskName"],[697,12,330,4,"_validateTaskName"],[697,29,330,21],[697,30,330,22,"taskName"],[697,38,330,21],[697,39,330,4],[699,0,329,7],[699,47,331,11,"ExpoLocation"],[699,69,331,24,"hasStartedLocationUpdatesAsync"],[699,99,331,11],[699,100,331,55,"taskName"],[699,108,331,11],[699,109,329,7],[701,0,329,7],[702,0,329,7],[703,0,329,7],[704,0,329,7],[705,0,329,7],[706,0,329,7],[707,0,329,7],[709,0,334,0],[709,11,334,9,"_validateRegions"],[709,27,334,0],[709,28,334,26,"regions"],[709,35,334,0],[709,37,334,35],[710,0,335,4],[710,8,335,8],[710,9,335,9,"regions"],[710,16,335,8],[710,20,335,20,"regions"],[710,27,335,27],[710,28,335,28,"length"],[710,34,335,20],[710,39,335,39],[710,40,335,4],[710,42,335,42],[711,0,336,8],[711,12,336,14],[711,16,336,18,"Error"],[711,21,336,14],[711,22,336,24],[711,123,336,14],[711,124,336,8],[712,0,337,5],[714,0,338,4],[714,25,338,25,"regions"],[714,32,338,4],[714,192,338,34],[715,0,338,34],[717,0,338,34],[718,0,338,34],[719,0,338,34],[720,0,338,34],[721,0,338,34],[722,0,338,34],[723,0,338,34],[724,0,338,34],[726,0,338,34],[726,10,338,15,"region"],[726,17,338,34],[728,0,339,8],[728,10,339,12],[728,17,339,19,"region"],[728,24,339,25],[728,25,339,26,"latitude"],[728,33,339,12],[728,38,339,39],[728,46,339,8],[728,48,339,49],[729,0,340,12],[729,14,340,18],[729,18,340,22,"TypeError"],[729,27,340,18],[729,74,340,76,"region"],[729,81,340,82],[729,82,340,83,"latitude"],[729,90,340,18],[729,106,340,12],[730,0,341,9],[732,0,342,8],[732,10,342,12],[732,17,342,19,"region"],[732,24,342,25],[732,25,342,26,"longitude"],[732,34,342,12],[732,39,342,40],[732,47,342,8],[732,49,342,50],[733,0,343,12],[733,14,343,18],[733,18,343,22,"TypeError"],[733,27,343,18],[733,75,343,77,"region"],[733,82,343,83],[733,83,343,84,"longitude"],[733,92,343,18],[733,108,343,12],[734,0,344,9],[736,0,345,8],[736,10,345,12],[736,17,345,19,"region"],[736,24,345,25],[736,25,345,26,"radius"],[736,31,345,12],[736,36,345,37],[736,44,345,8],[736,46,345,47],[737,0,346,12],[737,14,346,18],[737,18,346,22,"TypeError"],[737,27,346,18],[737,72,346,74,"region"],[737,79,346,80],[737,80,346,81,"radius"],[737,86,346,18],[737,102,346,12],[738,0,347,9],[739,0,348,5],[740,0,349,1],[742,0,350,7],[742,11,350,22,"startGeofencingAsync"],[742,31,350,7],[742,32,350,43,"taskName"],[742,40,350,7],[743,0,350,7],[744,0,350,7],[745,0,350,7],[746,0,350,7],[747,0,350,7],[748,0,350,7],[749,0,350,53,"regions"],[749,12,350,53,"regions"],[749,19,350,7],[749,84,350,63],[749,86,350,7],[751,0,351,4,"_validateTaskName"],[751,12,351,4,"_validateTaskName"],[751,29,351,21],[751,30,351,22,"taskName"],[751,38,351,21],[751,39,351,4],[753,0,352,4,"_validateRegions"],[753,12,352,4,"_validateRegions"],[753,28,352,20],[753,29,352,21,"regions"],[753,36,352,20],[753,37,352,4],[755,0,350,7],[756,0,350,7],[756,46,353,10,"ExpoLocation"],[756,68,353,23,"startGeofencingAsync"],[756,88,353,10],[756,89,353,44,"taskName"],[756,97,353,10],[756,99,353,54],[757,0,353,56,"regions"],[757,14,353,56,"regions"],[757,21,353,63],[757,23,353,56,"regions"],[758,0,353,54],[758,13,353,10],[758,14,350,7],[760,0,350,7],[761,0,350,7],[762,0,350,7],[763,0,350,7],[764,0,350,7],[765,0,350,7],[766,0,350,7],[768,0,355,7],[768,11,355,22,"stopGeofencingAsync"],[768,30,355,7],[768,31,355,42,"taskName"],[768,39,355,7],[769,0,355,7],[770,0,355,7],[771,0,355,7],[772,0,355,7],[773,0,356,4,"_validateTaskName"],[773,12,356,4,"_validateTaskName"],[773,29,356,21],[773,30,356,22,"taskName"],[773,38,356,21],[773,39,356,4],[775,0,355,7],[776,0,355,7],[776,46,357,10,"ExpoLocation"],[776,68,357,23,"stopGeofencingAsync"],[776,87,357,10],[776,88,357,43,"taskName"],[776,96,357,10],[776,97,355,7],[778,0,355,7],[779,0,355,7],[780,0,355,7],[781,0,355,7],[782,0,355,7],[783,0,355,7],[784,0,355,7],[786,0,359,7],[786,11,359,22,"hasStartedGeofencingAsync"],[786,36,359,7],[786,37,359,48,"taskName"],[786,45,359,7],[787,0,359,7],[788,0,359,7],[789,0,359,7],[790,0,359,7],[791,0,360,4,"_validateTaskName"],[791,12,360,4,"_validateTaskName"],[791,29,360,21],[791,30,360,22,"taskName"],[791,38,360,21],[791,39,360,4],[793,0,359,7],[793,47,361,11,"ExpoLocation"],[793,69,361,24,"hasStartedGeofencingAsync"],[793,94,361,11],[793,95,361,50,"taskName"],[793,103,361,11],[793,104,359,7],[795,0,359,7],[796,0,359,7],[797,0,359,7],[798,0,359,7],[799,0,359,7],[800,0,359,7],[801,0,359,7],[803,0,363,7],[803,11,363,16,"installWebGeolocationPolyfill"],[803,40,363,7],[803,43,363,48],[804,0,364,4],[804,8,364,8,"Platform"],[804,23,364,17,"OS"],[804,25,364,8],[804,30,364,24],[804,35,364,4],[804,37,364,31],[805,0,368,8,"window"],[805,6,368,8,"window"],[805,12,368,14],[805,13,368,15,"navigator"],[805,22,368,8],[805,23,368,25,"geolocation"],[805,34,368,8],[805,37,368,39],[806,0,369,12,"getCurrentPosition"],[806,8,369,12,"getCurrentPosition"],[806,26,369,30],[806,28,369,12,"getCurrentPosition"],[806,46,368,39],[807,0,370,12,"watchPosition"],[807,8,370,12,"watchPosition"],[807,21,370,25],[807,23,370,12,"watchPosition"],[807,36,368,39],[808,0,371,12,"clearWatch"],[808,8,371,12,"clearWatch"],[808,18,371,22],[808,20,371,12,"clearWatch"],[808,30,368,39],[809,0,374,12,"stopObserving"],[809,8,374,12,"stopObserving"],[809,21,374,25],[809,23,374,27],[809,48,374,33],[809,49,374,36],[810,0,368,39],[810,7,368,8],[811,0,376,5],[812,0,377,1]]},"type":"js/module"}]}