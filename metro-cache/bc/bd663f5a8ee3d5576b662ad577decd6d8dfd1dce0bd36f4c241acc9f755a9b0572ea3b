{"dependencies":[{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"./getDevServer","data":{"isAsync":false}},{"name":"../../BatchedBridge/NativeModules","data":{"isAsync":false}},{"name":"../../Network/fetch","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _regeneratorRuntime = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/regenerator\");\n\n  var _defineProperty = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\");\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var getDevServer = _$$_REQUIRE(_dependencyMap[2], \"./getDevServer\");\n\n  var _require = _$$_REQUIRE(_dependencyMap[3], \"../../BatchedBridge/NativeModules\"),\n      SourceCode = _require.SourceCode;\n\n  var fetch;\n\n  function isSourcedFromDisk(sourcePath) {\n    return !/^http/.test(sourcePath) && /[\\\\/]/.test(sourcePath);\n  }\n\n  function symbolicateStackTrace(stack) {\n    var devServer, stackCopy, foundInternalSource, response, json;\n    return _regeneratorRuntime.async(function symbolicateStackTrace$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!fetch) {\n              fetch = global.fetch || _$$_REQUIRE(_dependencyMap[4], \"../../Network/fetch\").fetch;\n            }\n\n            devServer = getDevServer();\n\n            if (devServer.bundleLoadedFromServer) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new Error('Bundle was not loaded from the packager');\n\n          case 4:\n            stackCopy = stack;\n\n            if (SourceCode.scriptURL) {\n              foundInternalSource = false;\n              stackCopy = stack.map(function (frame) {\n                if (!foundInternalSource && isSourcedFromDisk(frame.file)) {\n                  return _objectSpread({}, frame, {\n                    file: SourceCode.scriptURL\n                  });\n                }\n\n                foundInternalSource = true;\n                return frame;\n              });\n            }\n\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {\n              method: 'POST',\n              body: JSON.stringify({\n                stack: stackCopy\n              })\n            }));\n\n          case 8:\n            response = _context.sent;\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json.stack);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  module.exports = symbolicateStackTrace;\n});","map":[[2,0,11,0],[12,0,13,0],[12,6,13,6,"getDevServer"],[12,18,13,18],[12,21,13,21,"require"],[12,32,13,28],[12,69,13,0],[14,17,15,21,"require"],[14,28,15,28],[14,84],[15,6,15,7,"SourceCode"],[15,16],[15,28,15,7,"SourceCode"],[15,38],[17,0,18,0],[17,6,18,4,"fetch"],[17,11,18,0],[19,0,22,0],[19,11,22,9,"isSourcedFromDisk"],[19,28,22,0],[19,29,22,27,"sourcePath"],[19,39,22,0],[19,41,22,56],[20,0,23,2],[20,11,23,9],[20,12,23,10],[20,20,23,18,"test"],[20,24,23,10],[20,25,23,23,"sourcePath"],[20,35,23,10],[20,36,23,9],[20,40,23,38],[20,48,23,46,"test"],[20,52,23,38],[20,53,23,51,"sourcePath"],[20,63,23,38],[20,64,23,2],[21,0,24,1],[23,0,26,0],[23,11,26,15,"symbolicateStackTrace"],[23,32,26,0],[23,33,27,2,"stack"],[23,38,26,0],[24,0,26,0],[25,0,26,0],[26,0,26,0],[27,0,26,0],[28,0,26,0],[29,0,40,2],[29,16,40,6],[29,17,40,7,"fetch"],[29,22,40,2],[29,24,40,14],[30,0,41,4,"fetch"],[30,14,41,4,"fetch"],[30,19,41,9],[30,22,41,12,"global"],[30,28,41,18],[30,29,41,19,"fetch"],[30,34,41,12],[30,38,41,28,"require"],[30,49,41,35],[30,91,41,28],[30,92,41,59,"fetch"],[30,97,41,4],[31,0,42,3],[33,0,44,8,"devServer"],[33,12,44,8,"devServer"],[33,21,26,0],[33,24,44,20,"getDevServer"],[33,36,44,32],[33,38,26,0],[35,0,26,0],[35,16,45,7,"devServer"],[35,25,45,16],[35,26,45,17,"bundleLoadedFromServer"],[35,48,26,0],[36,0,26,0],[37,0,26,0],[38,0,26,0],[40,0,26,0],[40,18,46,10],[40,22,46,14,"Error"],[40,27,46,10],[40,28,46,20],[40,69,46,10],[40,70,26,0],[42,0,26,0],[43,0,49,6,"stackCopy"],[43,12,49,6,"stackCopy"],[43,21,26,0],[43,24,49,18,"stack"],[43,29,26,0],[45,0,51,2],[45,16,51,6,"SourceCode"],[45,26,51,16],[45,27,51,17,"scriptURL"],[45,36,51,2],[45,38,51,28],[46,0,52,8,"foundInternalSource"],[46,14,52,8,"foundInternalSource"],[46,33,51,28],[46,36,52,39],[46,41,51,28],[47,0,53,4,"stackCopy"],[47,14,53,4,"stackCopy"],[47,23,53,13],[47,26,53,16,"stack"],[47,31,53,21],[47,32,53,22,"map"],[47,35,53,16],[47,36,53,26],[47,46,53,27,"frame"],[47,51,53,26],[47,53,53,49],[48,0,58,6],[48,20,58,10],[48,21,58,11,"foundInternalSource"],[48,40,58,10],[48,44,58,34,"isSourcedFromDisk"],[48,61,58,51],[48,62,58,52,"frame"],[48,67,58,57],[48,68,58,58,"file"],[48,72,58,51],[48,73,58,6],[48,75,58,65],[49,0,60,8],[49,43,60,19,"frame"],[49,48,60,8],[50,0,60,26,"file"],[50,20,60,26,"file"],[50,24,60,30],[50,26,60,32,"SourceCode"],[50,36,60,42],[50,37,60,43,"scriptURL"],[51,0,60,8],[52,0,61,7],[54,0,63,6,"foundInternalSource"],[54,16,63,6,"foundInternalSource"],[54,35,63,25],[54,38,63,28],[54,42,63,6],[55,0,64,6],[55,23,64,13,"frame"],[55,28,64,6],[56,0,65,5],[56,15,53,16],[56,16,53,4],[57,0,66,3],[59,0,26,0],[60,0,26,0],[60,45,68,25,"fetch"],[60,50,68,30],[60,51,68,31,"devServer"],[60,60,68,40],[60,61,68,41,"url"],[60,64,68,31],[60,67,68,47],[60,80,68,30],[60,82,68,62],[61,0,69,4,"method"],[61,14,69,4,"method"],[61,20,69,10],[61,22,69,12],[61,28,68,62],[62,0,70,4,"body"],[62,14,70,4,"body"],[62,18,70,8],[62,20,70,10,"JSON"],[62,24,70,14],[62,25,70,15,"stringify"],[62,34,70,10],[62,35,70,25],[63,0,70,26,"stack"],[63,16,70,26,"stack"],[63,21,70,31],[63,23,70,33,"stackCopy"],[64,0,70,25],[64,15,70,10],[65,0,68,62],[65,13,68,30],[65,14,26,0],[67,0,26,0],[68,0,68,8,"response"],[68,12,68,8,"response"],[68,20,26,0],[69,0,26,0],[70,0,26,0],[70,45,72,21,"response"],[70,53,72,29],[70,54,72,30,"json"],[70,58,72,21],[70,60,26,0],[72,0,26,0],[73,0,72,8,"json"],[73,12,72,8,"json"],[73,16,26,0],[74,0,26,0],[74,45,73,9,"json"],[74,49,73,13],[74,50,73,14,"stack"],[74,55,26,0],[76,0,26,0],[77,0,26,0],[78,0,26,0],[79,0,26,0],[80,0,26,0],[81,0,26,0],[82,0,26,0],[84,0,76,0,"module"],[84,2,76,0,"module"],[84,8,76,6],[84,9,76,7,"exports"],[84,16,76,0],[84,19,76,17,"symbolicateStackTrace"],[84,40,76,0]]},"type":"js/module"}]}