{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"./RemoteLogging","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _RemoteLogging = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"./RemoteLogging\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function createRemoteConsole(originalConsole) {\n    var groupDepth = 0;\n    var enhancedConsole = Object.create(originalConsole);\n\n    _defineConsoleLogMethod('debug', 'info');\n\n    _defineConsoleLogMethod('log', 'info');\n\n    _defineConsoleLogMethod('info', 'info');\n\n    _defineConsoleLogMethod('warn', 'warn');\n\n    _defineConsoleLogMethod('error', 'error');\n\n    enhancedConsole.assert = function assert(condition) {\n      for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        data[_key - 1] = arguments[_key];\n      }\n\n      if (originalConsole.assert) {\n        originalConsole.assert.apply(originalConsole, [!!condition].concat(data));\n      }\n\n      if (condition) {\n        return;\n      }\n\n      var assertionMessage = 'Assertion failed';\n\n      if (!data.length) {\n        data.push(assertionMessage);\n      } else {\n        if (typeof data[0] !== 'string') {\n          data.unshift(assertionMessage);\n        } else {\n          data[0] = assertionMessage + \": \" + data[0];\n        }\n      }\n\n      _enqueueRemoteLog('error', {}, data);\n    };\n\n    enhancedConsole.group = function group() {\n      for (var _len2 = arguments.length, data = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        data[_key2] = arguments[_key2];\n      }\n\n      if (originalConsole.group) {\n        originalConsole.group.apply(originalConsole, data);\n      }\n\n      _enqueueRemoteLog('info', {}, data);\n\n      groupDepth++;\n    };\n\n    enhancedConsole.groupCollapsed = function groupCollapsed() {\n      for (var _len3 = arguments.length, data = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        data[_key3] = arguments[_key3];\n      }\n\n      if (originalConsole.groupCollapsed) {\n        originalConsole.groupCollapsed.apply(originalConsole, data);\n      }\n\n      _enqueueRemoteLog('info', {\n        groupCollapsed: true\n      }, data);\n\n      groupDepth++;\n    };\n\n    enhancedConsole.groupEnd = function groupEnd() {\n      if (originalConsole.groupEnd) {\n        originalConsole.groupEnd();\n      }\n\n      if (groupDepth > 0) {\n        groupDepth--;\n      }\n\n      _enqueueRemoteLog('info', {\n        shouldHide: true\n      }, []);\n    };\n\n    function _defineConsoleLogMethod(name, level) {\n      enhancedConsole[name] = function __expoConsoleLog() {\n        var originalMethod = originalConsole[name];\n\n        for (var _len4 = arguments.length, data = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          data[_key4] = arguments[_key4];\n        }\n\n        if (typeof originalMethod === 'function') {\n          originalMethod.apply(originalConsole, data);\n        }\n\n        _enqueueRemoteLog(level, {}, data);\n      };\n    }\n\n    function _enqueueRemoteLog(level, additionalFields, data) {\n      _RemoteLogging.default.enqueueRemoteLogAsync(level, _objectSpread({\n        groupDepth: groupDepth\n      }, additionalFields), data).catch(function (error) {\n        originalConsole.error(\"There was a problem sending log messages to your development environment\", error);\n      });\n    }\n\n    return enhancedConsole;\n  }\n\n  var _default = {\n    createRemoteConsole: createRemoteConsole\n  };\n  exports.default = _default;\n});","map":[[11,0,1,0],[17,0,6,0],[17,11,6,9,"createRemoteConsole"],[17,30,6,0],[17,31,6,29,"originalConsole"],[17,46,6,0],[17,48,6,46],[18,0,7,4],[18,8,7,8,"groupDepth"],[18,18,7,18],[18,21,7,21],[18,22,7,4],[19,0,8,4],[19,8,8,10,"enhancedConsole"],[19,23,8,25],[19,26,8,28,"Object"],[19,32,8,34],[19,33,8,35,"create"],[19,39,8,28],[19,40,8,42,"originalConsole"],[19,55,8,28],[19,56,8,4],[21,0,12,4,"_defineConsoleLogMethod"],[21,4,12,4,"_defineConsoleLogMethod"],[21,27,12,27],[21,28,12,28],[21,35,12,27],[21,37,12,37],[21,43,12,27],[21,44,12,4],[23,0,14,4,"_defineConsoleLogMethod"],[23,4,14,4,"_defineConsoleLogMethod"],[23,27,14,27],[23,28,14,28],[23,33,14,27],[23,35,14,35],[23,41,14,27],[23,42,14,4],[25,0,16,4,"_defineConsoleLogMethod"],[25,4,16,4,"_defineConsoleLogMethod"],[25,27,16,27],[25,28,16,28],[25,34,16,27],[25,36,16,36],[25,42,16,27],[25,43,16,4],[27,0,18,4,"_defineConsoleLogMethod"],[27,4,18,4,"_defineConsoleLogMethod"],[27,27,18,27],[27,28,18,28],[27,34,18,27],[27,36,18,36],[27,42,18,27],[27,43,18,4],[29,0,20,4,"_defineConsoleLogMethod"],[29,4,20,4,"_defineConsoleLogMethod"],[29,27,20,27],[29,28,20,28],[29,35,20,27],[29,37,20,37],[29,44,20,27],[29,45,20,4],[31,0,22,4,"enhancedConsole"],[31,4,22,4,"enhancedConsole"],[31,19,22,19],[31,20,22,20,"assert"],[31,26,22,4],[31,29,22,29],[31,38,22,38,"assert"],[31,44,22,29],[31,45,22,45,"condition"],[31,54,22,29],[31,56,22,65],[32,0,22,65],[32,40,22,59,"data"],[32,44,22,65],[33,0,22,59,"data"],[33,8,22,59,"data"],[33,12,22,65],[34,0,22,65],[36,0,23,8],[36,10,23,12,"originalConsole"],[36,25,23,27],[36,26,23,28,"assert"],[36,32,23,8],[36,34,23,36],[37,0,25,12,"originalConsole"],[37,8,25,12,"originalConsole"],[37,23,25,27],[37,24,25,28,"assert"],[37,30,25,12],[37,37,25,12,"originalConsole"],[37,52,25,27],[37,55,25,35],[37,56,25,36],[37,57,25,37,"condition"],[37,66,25,27],[37,75,25,51,"data"],[37,79,25,27],[37,81,25,12],[38,0,26,9],[40,0,27,8],[40,10,27,12,"condition"],[40,19,27,8],[40,21,27,23],[41,0,28,12],[42,0,29,9],[44,0,30,8],[44,10,30,14,"assertionMessage"],[44,26,30,30],[44,29,30,33],[44,47,30,8],[46,0,31,8],[46,10,31,12],[46,11,31,13,"data"],[46,15,31,17],[46,16,31,18,"length"],[46,22,31,8],[46,24,31,26],[47,0,32,12,"data"],[47,8,32,12,"data"],[47,12,32,16],[47,13,32,17,"push"],[47,17,32,12],[47,18,32,22,"assertionMessage"],[47,34,32,12],[48,0,33,9],[48,7,31,8],[48,13,34,13],[49,0,35,12],[49,12,35,16],[49,19,35,23,"data"],[49,23,35,27],[49,24,35,28],[49,25,35,27],[49,26,35,16],[49,31,35,35],[49,39,35,12],[49,41,35,45],[50,0,36,16,"data"],[50,10,36,16,"data"],[50,14,36,20],[50,15,36,21,"unshift"],[50,22,36,16],[50,23,36,29,"assertionMessage"],[50,39,36,16],[51,0,37,13],[51,9,35,12],[51,15,38,17],[52,0,39,16,"data"],[52,10,39,16,"data"],[52,14,39,20],[52,15,39,21],[52,16,39,20],[52,17,39,16],[52,20,39,29,"assertionMessage"],[52,36,39,16],[52,46,39,50,"data"],[52,50,39,54],[52,51,39,55],[52,52,39,54],[52,53,39,16],[53,0,40,13],[54,0,41,9],[56,0,42,8,"_enqueueRemoteLog"],[56,6,42,8,"_enqueueRemoteLog"],[56,23,42,25],[56,24,42,26],[56,31,42,25],[56,33,42,35],[56,35,42,25],[56,37,42,39,"data"],[56,41,42,25],[56,42,42,8],[57,0,43,5],[57,5,22,4],[59,0,45,4,"enhancedConsole"],[59,4,45,4,"enhancedConsole"],[59,19,45,19],[59,20,45,20,"group"],[59,25,45,4],[59,28,45,28],[59,37,45,37,"group"],[59,42,45,28],[59,45,45,52],[60,0,45,52],[60,41,45,46,"data"],[60,45,45,52],[61,0,45,46,"data"],[61,8,45,46,"data"],[61,12,45,52],[62,0,45,52],[64,0,46,8],[64,10,46,12,"originalConsole"],[64,25,46,27],[64,26,46,28,"group"],[64,31,46,8],[64,33,46,35],[65,0,48,12,"originalConsole"],[65,8,48,12,"originalConsole"],[65,23,48,27],[65,24,48,28,"group"],[65,29,48,12],[65,36,48,12,"originalConsole"],[65,51,48,27],[65,53,48,37,"data"],[65,57,48,27],[65,58,48,12],[66,0,49,9],[68,0,50,8,"_enqueueRemoteLog"],[68,6,50,8,"_enqueueRemoteLog"],[68,23,50,25],[68,24,50,26],[68,30,50,25],[68,32,50,34],[68,34,50,25],[68,36,50,38,"data"],[68,40,50,25],[68,41,50,8],[70,0,51,8,"groupDepth"],[70,6,51,8,"groupDepth"],[70,16,51,18],[71,0,52,5],[71,5,45,4],[73,0,54,4,"enhancedConsole"],[73,4,54,4,"enhancedConsole"],[73,19,54,19],[73,20,54,20,"groupCollapsed"],[73,34,54,4],[73,37,54,37],[73,46,54,46,"groupCollapsed"],[73,60,54,37],[73,63,54,70],[74,0,54,70],[74,41,54,64,"data"],[74,45,54,70],[75,0,54,64,"data"],[75,8,54,64,"data"],[75,12,54,70],[76,0,54,70],[78,0,55,8],[78,10,55,12,"originalConsole"],[78,25,55,27],[78,26,55,28,"groupCollapsed"],[78,40,55,8],[78,42,55,44],[79,0,57,12,"originalConsole"],[79,8,57,12,"originalConsole"],[79,23,57,27],[79,24,57,28,"groupCollapsed"],[79,38,57,12],[79,45,57,12,"originalConsole"],[79,60,57,27],[79,62,57,46,"data"],[79,66,57,27],[79,67,57,12],[80,0,58,9],[82,0,59,8,"_enqueueRemoteLog"],[82,6,59,8,"_enqueueRemoteLog"],[82,23,59,25],[82,24,59,26],[82,30,59,25],[82,32,59,34],[83,0,59,36,"groupCollapsed"],[83,8,59,36,"groupCollapsed"],[83,22,59,50],[83,24,59,52],[84,0,59,34],[84,7,59,25],[84,9,59,60,"data"],[84,13,59,25],[84,14,59,8],[86,0,60,8,"groupDepth"],[86,6,60,8,"groupDepth"],[86,16,60,18],[87,0,61,5],[87,5,54,4],[89,0,63,4,"enhancedConsole"],[89,4,63,4,"enhancedConsole"],[89,19,63,19],[89,20,63,20,"groupEnd"],[89,28,63,4],[89,31,63,31],[89,40,63,40,"groupEnd"],[89,48,63,31],[89,51,63,51],[90,0,64,8],[90,10,64,12,"originalConsole"],[90,25,64,27],[90,26,64,28,"groupEnd"],[90,34,64,8],[90,36,64,38],[91,0,65,12,"originalConsole"],[91,8,65,12,"originalConsole"],[91,23,65,27],[91,24,65,28,"groupEnd"],[91,32,65,12],[92,0,66,9],[94,0,67,8],[94,10,67,12,"groupDepth"],[94,20,67,22],[94,23,67,25],[94,24,67,8],[94,26,67,28],[95,0,68,12,"groupDepth"],[95,8,68,12,"groupDepth"],[95,18,68,22],[96,0,69,9],[98,0,70,8,"_enqueueRemoteLog"],[98,6,70,8,"_enqueueRemoteLog"],[98,23,70,25],[98,24,70,26],[98,30,70,25],[98,32,70,34],[99,0,70,36,"shouldHide"],[99,8,70,36,"shouldHide"],[99,18,70,46],[99,20,70,48],[100,0,70,34],[100,7,70,25],[100,9,70,56],[100,11,70,25],[100,12,70,8],[101,0,71,5],[101,5,63,4],[103,0,76,4],[103,13,76,13,"_defineConsoleLogMethod"],[103,36,76,4],[103,37,76,37,"name"],[103,41,76,4],[103,43,76,43,"level"],[103,48,76,4],[103,50,76,50],[104,0,77,8,"enhancedConsole"],[104,6,77,8,"enhancedConsole"],[104,21,77,23],[104,22,77,24,"name"],[104,26,77,23],[104,27,77,8],[104,30,77,32],[104,39,77,41,"__expoConsoleLog"],[104,55,77,32],[104,58,77,67],[105,0,78,12],[105,12,78,16,"originalMethod"],[105,26,78,30],[105,29,78,33,"originalConsole"],[105,44,78,48],[105,45,78,49,"name"],[105,49,78,48],[105,50,78,12],[107,0,77,67],[107,43,77,61,"data"],[107,47,77,67],[108,0,77,61,"data"],[108,10,77,61,"data"],[108,14,77,67],[109,0,77,67],[111,0,79,12],[111,12,79,16],[111,19,79,23,"originalMethod"],[111,33,79,16],[111,38,79,42],[111,48,79,12],[111,50,79,54],[112,0,80,16,"originalMethod"],[112,10,80,16,"originalMethod"],[112,24,80,30],[112,25,80,31,"apply"],[112,30,80,16],[112,31,80,37,"originalConsole"],[112,46,80,16],[112,48,80,54,"data"],[112,52,80,16],[113,0,81,13],[115,0,82,12,"_enqueueRemoteLog"],[115,8,82,12,"_enqueueRemoteLog"],[115,25,82,29],[115,26,82,30,"level"],[115,31,82,29],[115,33,82,37],[115,35,82,29],[115,37,82,41,"data"],[115,41,82,29],[115,42,82,12],[116,0,83,9],[116,7,77,8],[117,0,84,5],[119,0,91,4],[119,13,91,13,"_enqueueRemoteLog"],[119,30,91,4],[119,31,91,31,"level"],[119,36,91,4],[119,38,91,38,"additionalFields"],[119,54,91,4],[119,56,91,56,"data"],[119,60,91,4],[119,62,91,62],[120,0,92,8,"RemoteLogging"],[120,29,92,22,"enqueueRemoteLogAsync"],[120,50,92,8],[120,51,92,44,"level"],[120,56,92,8],[121,0,92,53,"groupDepth"],[121,8,92,53,"groupDepth"],[121,18,92,63],[121,20,92,53,"groupDepth"],[122,0,92,8],[122,9,92,68,"additionalFields"],[122,25,92,8],[122,28,92,88,"data"],[122,32,92,8],[122,34,92,94,"catch"],[122,39,92,8],[122,40,92,100],[122,50,92,100,"error"],[122,55,92,105],[122,57,92,109],[123,0,93,12,"originalConsole"],[123,8,93,12,"originalConsole"],[123,23,93,27],[123,24,93,28,"error"],[123,29,93,12],[123,106,93,110,"error"],[123,111,93,12],[124,0,94,9],[124,7,92,8],[125,0,95,5],[127,0,96,4],[127,11,96,11,"enhancedConsole"],[127,26,96,4],[128,0,97,1],[130,17,98,15],[131,0,99,4,"createRemoteConsole"],[131,4,99,4,"createRemoteConsole"],[131,23,99,23],[131,25,99,4,"createRemoteConsole"],[132,0,98,15],[132,3]]},"type":"js/module"}]}