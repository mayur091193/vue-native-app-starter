{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/get","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"./AnimatedNode","data":{"isAsync":false}},{"name":"./AnimatedWithChildren","data":{"isAsync":false}},{"name":"../NativeAnimatedHelper","data":{"isAsync":false}},{"name":"invariant","data":{"isAsync":false}},{"name":"../../../Color/normalizeColor","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n\n  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/possibleConstructorReturn\");\n\n  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/getPrototypeOf\");\n\n  var _get = _$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/get\");\n\n  var _inherits = _$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/inherits\");\n\n  var _defineProperty = _$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/defineProperty\");\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7], \"./AnimatedNode\");\n\n  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8], \"./AnimatedWithChildren\");\n\n  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[9], \"../NativeAnimatedHelper\");\n\n  var invariant = _$$_REQUIRE(_dependencyMap[10], \"invariant\");\n\n  var normalizeColor = _$$_REQUIRE(_dependencyMap[11], \"../../../Color/normalizeColor\");\n\n  var linear = function linear(t) {\n    return t;\n  };\n\n  function createInterpolation(config) {\n    if (config.outputRange && typeof config.outputRange[0] === 'string') {\n      return createInterpolationFromStringOutputRange(config);\n    }\n\n    var outputRange = config.outputRange;\n    checkInfiniteRange('outputRange', outputRange);\n    var inputRange = config.inputRange;\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n    var easing = config.easing || linear;\n    var extrapolateLeft = 'extend';\n\n    if (config.extrapolateLeft !== undefined) {\n      extrapolateLeft = config.extrapolateLeft;\n    } else if (config.extrapolate !== undefined) {\n      extrapolateLeft = config.extrapolate;\n    }\n\n    var extrapolateRight = 'extend';\n\n    if (config.extrapolateRight !== undefined) {\n      extrapolateRight = config.extrapolateRight;\n    } else if (config.extrapolate !== undefined) {\n      extrapolateRight = config.extrapolate;\n    }\n\n    return function (input) {\n      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n      var range = findRange(input, inputRange);\n      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n    };\n  }\n\n  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n    var result = input;\n\n    if (result < inputMin) {\n      if (extrapolateLeft === 'identity') {\n        return result;\n      } else if (extrapolateLeft === 'clamp') {\n        result = inputMin;\n      } else if (extrapolateLeft === 'extend') {}\n    }\n\n    if (result > inputMax) {\n      if (extrapolateRight === 'identity') {\n        return result;\n      } else if (extrapolateRight === 'clamp') {\n        result = inputMax;\n      } else if (extrapolateRight === 'extend') {}\n    }\n\n    if (outputMin === outputMax) {\n      return outputMin;\n    }\n\n    if (inputMin === inputMax) {\n      if (input <= inputMin) {\n        return outputMin;\n      }\n\n      return outputMax;\n    }\n\n    if (inputMin === -Infinity) {\n      result = -result;\n    } else if (inputMax === Infinity) {\n      result = result - inputMin;\n    } else {\n      result = (result - inputMin) / (inputMax - inputMin);\n    }\n\n    result = easing(result);\n\n    if (outputMin === -Infinity) {\n      result = -result;\n    } else if (outputMax === Infinity) {\n      result = result + outputMin;\n    } else {\n      result = result * (outputMax - outputMin) + outputMin;\n    }\n\n    return result;\n  }\n\n  function colorToRgba(input) {\n    var int32Color = normalizeColor(input);\n\n    if (int32Color === null) {\n      return input;\n    }\n\n    int32Color = int32Color || 0;\n    var r = (int32Color & 0xff000000) >>> 24;\n    var g = (int32Color & 0x00ff0000) >>> 16;\n    var b = (int32Color & 0x0000ff00) >>> 8;\n    var a = (int32Color & 0x000000ff) / 255;\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n  }\n\n  var stringShapeRegex = /[0-9\\.-]+/g;\n\n  function createInterpolationFromStringOutputRange(config) {\n    var outputRange = config.outputRange;\n    invariant(outputRange.length >= 2, 'Bad output range');\n    outputRange = outputRange.map(colorToRgba);\n    checkPattern(outputRange);\n    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n      return [];\n    });\n    outputRange.forEach(function (value) {\n      value.match(stringShapeRegex).forEach(function (number, i) {\n        outputRanges[i].push(+number);\n      });\n    });\n    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n      return createInterpolation(_objectSpread({}, config, {\n        outputRange: outputRanges[i]\n      }));\n    });\n    var shouldRound = isRgbOrRgba(outputRange[0]);\n    return function (input) {\n      var i = 0;\n      return outputRange[0].replace(stringShapeRegex, function () {\n        var val = +interpolations[i++](input);\n        var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n        return String(rounded);\n      });\n    };\n  }\n\n  function isRgbOrRgba(range) {\n    return typeof range === 'string' && range.startsWith('rgb');\n  }\n\n  function checkPattern(arr) {\n    var pattern = arr[0].replace(stringShapeRegex, '');\n\n    for (var i = 1; i < arr.length; ++i) {\n      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n    }\n  }\n\n  function findRange(input, inputRange) {\n    var i;\n\n    for (i = 1; i < inputRange.length - 1; ++i) {\n      if (inputRange[i] >= input) {\n        break;\n      }\n    }\n\n    return i - 1;\n  }\n\n  function checkValidInputRange(arr) {\n    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n    for (var i = 1; i < arr.length; ++i) {\n      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);\n    }\n  }\n\n  function checkInfiniteRange(name, arr) {\n    invariant(arr.length >= 2, name + ' must have at least 2 elements');\n    invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n  }\n\n  var AnimatedInterpolation = function (_AnimatedWithChildren) {\n    _inherits(AnimatedInterpolation, _AnimatedWithChildren);\n\n    function AnimatedInterpolation(parent, config) {\n      var _this;\n\n      _classCallCheck(this, AnimatedInterpolation);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedInterpolation).call(this));\n      _this._parent = parent;\n      _this._config = config;\n      _this._interpolation = createInterpolation(config);\n      return _this;\n    }\n\n    _createClass(AnimatedInterpolation, [{\n      key: \"__makeNative\",\n      value: function __makeNative() {\n        this._parent.__makeNative();\n\n        _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__makeNative\", this).call(this);\n      }\n    }, {\n      key: \"__getValue\",\n      value: function __getValue() {\n        var parentValue = this._parent.__getValue();\n\n        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n        return this._interpolation(parentValue);\n      }\n    }, {\n      key: \"interpolate\",\n      value: function interpolate(config) {\n        return new AnimatedInterpolation(this, config);\n      }\n    }, {\n      key: \"__attach\",\n      value: function __attach() {\n        this._parent.__addChild(this);\n      }\n    }, {\n      key: \"__detach\",\n      value: function __detach() {\n        this._parent.__removeChild(this);\n\n        _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__detach\", this).call(this);\n      }\n    }, {\n      key: \"__transformDataType\",\n      value: function __transformDataType(range) {\n        return range.map(NativeAnimatedHelper.transformDataType);\n      }\n    }, {\n      key: \"__getNativeConfig\",\n      value: function __getNativeConfig() {\n        if (__DEV__) {\n          NativeAnimatedHelper.validateInterpolation(this._config);\n        }\n\n        return {\n          inputRange: this._config.inputRange,\n          outputRange: this.__transformDataType(this._config.outputRange),\n          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n          type: 'interpolation'\n        };\n      }\n    }]);\n\n    return AnimatedInterpolation;\n  }(AnimatedWithChildren);\n\n  AnimatedInterpolation.__createInterpolation = createInterpolation;\n  module.exports = AnimatedInterpolation;\n});","map":[[2,0,11,0],[22,0,13,0],[22,6,13,6,"AnimatedNode"],[22,18,13,18],[22,21,13,21,"require"],[22,32,13,28],[22,69,13,0],[24,0,14,0],[24,6,14,6,"AnimatedWithChildren"],[24,26,14,26],[24,29,14,29,"require"],[24,40,14,36],[24,85,14,0],[26,0,15,0],[26,6,15,6,"NativeAnimatedHelper"],[26,26,15,26],[26,29,15,29,"require"],[26,40,15,36],[26,86,15,0],[28,0,17,0],[28,6,17,6,"invariant"],[28,15,17,15],[28,18,17,18,"require"],[28,29,17,25],[28,62,17,0],[30,0,18,0],[30,6,18,6,"normalizeColor"],[30,20,18,20],[30,23,18,23,"require"],[30,34,18,30],[30,87,18,0],[32,0,35,0],[32,6,35,6,"linear"],[32,12,35,12],[32,15,35,15],[32,24,35,6,"linear"],[32,30,35,15],[32,31,35,15,"t"],[32,32,35,16],[33,0,35,16],[33,11,35,20,"t"],[33,12,35,16],[34,0,35,16],[34,3,35,0],[36,0,41,0],[36,11,41,9,"createInterpolation"],[36,30,41,0],[36,31,42,2,"config"],[36,37,41,0],[36,39,43,38],[37,0,44,2],[37,8,44,6,"config"],[37,14,44,12],[37,15,44,13,"outputRange"],[37,26,44,6],[37,30,44,28],[37,37,44,35,"config"],[37,43,44,41],[37,44,44,42,"outputRange"],[37,55,44,35],[37,56,44,54],[37,57,44,35],[37,58,44,28],[37,63,44,61],[37,71,44,2],[37,73,44,71],[38,0,45,4],[38,13,45,11,"createInterpolationFromStringOutputRange"],[38,53,45,51],[38,54,45,52,"config"],[38,60,45,51],[38,61,45,4],[39,0,46,3],[41,0,48,2],[41,8,48,8,"outputRange"],[41,19,48,34],[41,22,48,38,"config"],[41,28,48,44],[41,29,48,45,"outputRange"],[41,40,48,2],[42,0,49,2,"checkInfiniteRange"],[42,4,49,2,"checkInfiniteRange"],[42,22,49,20],[42,23,49,21],[42,36,49,20],[42,38,49,36,"outputRange"],[42,49,49,20],[42,50,49,2],[43,0,51,2],[43,8,51,8,"inputRange"],[43,18,51,18],[43,21,51,21,"config"],[43,27,51,27],[43,28,51,28,"inputRange"],[43,38,51,2],[44,0,52,2,"checkInfiniteRange"],[44,4,52,2,"checkInfiniteRange"],[44,22,52,20],[44,23,52,21],[44,35,52,20],[44,37,52,35,"inputRange"],[44,47,52,20],[44,48,52,2],[45,0,53,2,"checkValidInputRange"],[45,4,53,2,"checkValidInputRange"],[45,24,53,22],[45,25,53,23,"inputRange"],[45,35,53,22],[45,36,53,2],[46,0,55,2,"invariant"],[46,4,55,2,"invariant"],[46,13,55,11],[46,14,56,4,"inputRange"],[46,24,56,14],[46,25,56,15,"length"],[46,31,56,4],[46,36,56,26,"outputRange"],[46,47,56,37],[46,48,56,38,"length"],[46,54,55,11],[46,56,57,4],[46,73,58,6,"inputRange"],[46,83,58,16],[46,84,58,17,"length"],[46,90,57,4],[46,93,59,6],[46,114,57,4],[46,117,60,6,"outputRange"],[46,128,60,17],[46,129,60,18,"length"],[46,135,57,4],[46,138,61,6],[46,167,55,11],[46,168,55,2],[47,0,64,2],[47,8,64,8,"easing"],[47,14,64,14],[47,17,64,17,"config"],[47,23,64,23],[47,24,64,24,"easing"],[47,30,64,17],[47,34,64,34,"linear"],[47,40,64,2],[48,0,66,2],[48,8,66,6,"extrapolateLeft"],[48,23,66,38],[48,26,66,41],[48,34,66,2],[50,0,67,2],[50,8,67,6,"config"],[50,14,67,12],[50,15,67,13,"extrapolateLeft"],[50,30,67,6],[50,35,67,33,"undefined"],[50,44,67,2],[50,46,67,44],[51,0,68,4,"extrapolateLeft"],[51,6,68,4,"extrapolateLeft"],[51,21,68,19],[51,24,68,22,"config"],[51,30,68,28],[51,31,68,29,"extrapolateLeft"],[51,46,68,4],[52,0,69,3],[52,5,67,2],[52,11,69,9],[52,15,69,13,"config"],[52,21,69,19],[52,22,69,20,"extrapolate"],[52,33,69,13],[52,38,69,36,"undefined"],[52,47,69,9],[52,49,69,47],[53,0,70,4,"extrapolateLeft"],[53,6,70,4,"extrapolateLeft"],[53,21,70,19],[53,24,70,22,"config"],[53,30,70,28],[53,31,70,29,"extrapolate"],[53,42,70,4],[54,0,71,3],[56,0,73,2],[56,8,73,6,"extrapolateRight"],[56,24,73,39],[56,27,73,42],[56,35,73,2],[58,0,74,2],[58,8,74,6,"config"],[58,14,74,12],[58,15,74,13,"extrapolateRight"],[58,31,74,6],[58,36,74,34,"undefined"],[58,45,74,2],[58,47,74,45],[59,0,75,4,"extrapolateRight"],[59,6,75,4,"extrapolateRight"],[59,22,75,20],[59,25,75,23,"config"],[59,31,75,29],[59,32,75,30,"extrapolateRight"],[59,48,75,4],[60,0,76,3],[60,5,74,2],[60,11,76,9],[60,15,76,13,"config"],[60,21,76,19],[60,22,76,20,"extrapolate"],[60,33,76,13],[60,38,76,36,"undefined"],[60,47,76,9],[60,49,76,47],[61,0,77,4,"extrapolateRight"],[61,6,77,4,"extrapolateRight"],[61,22,77,20],[61,25,77,23,"config"],[61,31,77,29],[61,32,77,30,"extrapolate"],[61,43,77,4],[62,0,78,3],[64,0,80,2],[64,11,80,9],[64,21,80,9,"input"],[64,26,80,14],[64,28,80,18],[65,0,81,4,"invariant"],[65,6,81,4,"invariant"],[65,15,81,13],[65,16,82,6],[65,23,82,13,"input"],[65,28,82,6],[65,33,82,23],[65,41,81,13],[65,43,83,6],[65,96,81,13],[65,97,81,4],[66,0,86,4],[66,10,86,10,"range"],[66,15,86,15],[66,18,86,18,"findRange"],[66,27,86,27],[66,28,86,28,"input"],[66,33,86,27],[66,35,86,35,"inputRange"],[66,45,86,27],[66,46,86,4],[67,0,87,4],[67,13,87,11,"interpolate"],[67,24,87,22],[67,25,88,6,"input"],[67,30,87,22],[67,32,89,6,"inputRange"],[67,42,89,16],[67,43,89,17,"range"],[67,48,89,16],[67,49,87,22],[67,51,90,6,"inputRange"],[67,61,90,16],[67,62,90,17,"range"],[67,67,90,22],[67,70,90,25],[67,71,90,16],[67,72,87,22],[67,74,91,6,"outputRange"],[67,85,91,17],[67,86,91,18,"range"],[67,91,91,17],[67,92,87,22],[67,94,92,6,"outputRange"],[67,105,92,17],[67,106,92,18,"range"],[67,111,92,23],[67,114,92,26],[67,115,92,17],[67,116,87,22],[67,118,93,6,"easing"],[67,124,87,22],[67,126,94,6,"extrapolateLeft"],[67,141,87,22],[67,143,95,6,"extrapolateRight"],[67,159,87,22],[67,160,87,4],[68,0,97,3],[68,5,80,2],[69,0,98,1],[71,0,100,0],[71,11,100,9,"interpolate"],[71,22,100,0],[71,23,101,2,"input"],[71,28,100,0],[71,30,102,2,"inputMin"],[71,38,100,0],[71,40,103,2,"inputMax"],[71,48,100,0],[71,50,104,2,"outputMin"],[71,59,100,0],[71,61,105,2,"outputMax"],[71,70,100,0],[71,72,106,2,"easing"],[71,78,100,0],[71,80,107,2,"extrapolateLeft"],[71,95,100,0],[71,97,108,2,"extrapolateRight"],[71,113,100,0],[71,115,109,2],[72,0,110,2],[72,8,110,6,"result"],[72,14,110,12],[72,17,110,15,"input"],[72,22,110,2],[74,0,113,2],[74,8,113,6,"result"],[74,14,113,12],[74,17,113,15,"inputMin"],[74,25,113,2],[74,27,113,25],[75,0,114,4],[75,10,114,8,"extrapolateLeft"],[75,25,114,23],[75,30,114,28],[75,40,114,4],[75,42,114,40],[76,0,115,6],[76,15,115,13,"result"],[76,21,115,6],[77,0,116,5],[77,7,114,4],[77,13,116,11],[77,17,116,15,"extrapolateLeft"],[77,32,116,30],[77,37,116,35],[77,44,116,11],[77,46,116,44],[78,0,117,6,"result"],[78,8,117,6,"result"],[78,14,117,12],[78,17,117,15,"inputMin"],[78,25,117,6],[79,0,118,5],[79,7,116,11],[79,13,118,11],[79,17,118,15,"extrapolateLeft"],[79,32,118,30],[79,37,118,35],[79,45,118,11],[79,47,118,45],[79,48,120,5],[80,0,121,3],[82,0,123,2],[82,8,123,6,"result"],[82,14,123,12],[82,17,123,15,"inputMax"],[82,25,123,2],[82,27,123,25],[83,0,124,4],[83,10,124,8,"extrapolateRight"],[83,26,124,24],[83,31,124,29],[83,41,124,4],[83,43,124,41],[84,0,125,6],[84,15,125,13,"result"],[84,21,125,6],[85,0,126,5],[85,7,124,4],[85,13,126,11],[85,17,126,15,"extrapolateRight"],[85,33,126,31],[85,38,126,36],[85,45,126,11],[85,47,126,45],[86,0,127,6,"result"],[86,8,127,6,"result"],[86,14,127,12],[86,17,127,15,"inputMax"],[86,25,127,6],[87,0,128,5],[87,7,126,11],[87,13,128,11],[87,17,128,15,"extrapolateRight"],[87,33,128,31],[87,38,128,36],[87,46,128,11],[87,48,128,46],[87,49,130,5],[88,0,131,3],[90,0,133,2],[90,8,133,6,"outputMin"],[90,17,133,15],[90,22,133,20,"outputMax"],[90,31,133,2],[90,33,133,31],[91,0,134,4],[91,13,134,11,"outputMin"],[91,22,134,4],[92,0,135,3],[94,0,137,2],[94,8,137,6,"inputMin"],[94,16,137,14],[94,21,137,19,"inputMax"],[94,29,137,2],[94,31,137,29],[95,0,138,4],[95,10,138,8,"input"],[95,15,138,13],[95,19,138,17,"inputMin"],[95,27,138,4],[95,29,138,27],[96,0,139,6],[96,15,139,13,"outputMin"],[96,24,139,6],[97,0,140,5],[99,0,141,4],[99,13,141,11,"outputMax"],[99,22,141,4],[100,0,142,3],[102,0,145,2],[102,8,145,6,"inputMin"],[102,16,145,14],[102,21,145,19],[102,22,145,20,"Infinity"],[102,30,145,2],[102,32,145,30],[103,0,146,4,"result"],[103,6,146,4,"result"],[103,12,146,10],[103,15,146,13],[103,16,146,14,"result"],[103,22,146,4],[104,0,147,3],[104,5,145,2],[104,11,147,9],[104,15,147,13,"inputMax"],[104,23,147,21],[104,28,147,26,"Infinity"],[104,36,147,9],[104,38,147,36],[105,0,148,4,"result"],[105,6,148,4,"result"],[105,12,148,10],[105,15,148,13,"result"],[105,21,148,19],[105,24,148,22,"inputMin"],[105,32,148,4],[106,0,149,3],[106,5,147,9],[106,11,149,9],[107,0,150,4,"result"],[107,6,150,4,"result"],[107,12,150,10],[107,15,150,13],[107,16,150,14,"result"],[107,22,150,20],[107,25,150,23,"inputMin"],[107,33,150,13],[107,38,150,36,"inputMax"],[107,46,150,44],[107,49,150,47,"inputMin"],[107,57,150,13],[107,58,150,4],[108,0,151,3],[110,0,154,2,"result"],[110,4,154,2,"result"],[110,10,154,8],[110,13,154,11,"easing"],[110,19,154,17],[110,20,154,18,"result"],[110,26,154,17],[110,27,154,2],[112,0,157,2],[112,8,157,6,"outputMin"],[112,17,157,15],[112,22,157,20],[112,23,157,21,"Infinity"],[112,31,157,2],[112,33,157,31],[113,0,158,4,"result"],[113,6,158,4,"result"],[113,12,158,10],[113,15,158,13],[113,16,158,14,"result"],[113,22,158,4],[114,0,159,3],[114,5,157,2],[114,11,159,9],[114,15,159,13,"outputMax"],[114,24,159,22],[114,29,159,27,"Infinity"],[114,37,159,9],[114,39,159,37],[115,0,160,4,"result"],[115,6,160,4,"result"],[115,12,160,10],[115,15,160,13,"result"],[115,21,160,19],[115,24,160,22,"outputMin"],[115,33,160,4],[116,0,161,3],[116,5,159,9],[116,11,161,9],[117,0,162,4,"result"],[117,6,162,4,"result"],[117,12,162,10],[117,15,162,13,"result"],[117,21,162,19],[117,25,162,23,"outputMax"],[117,34,162,32],[117,37,162,35,"outputMin"],[117,46,162,19],[117,47,162,13],[117,50,162,48,"outputMin"],[117,59,162,4],[118,0,163,3],[120,0,165,2],[120,11,165,9,"result"],[120,17,165,2],[121,0,166,1],[123,0,168,0],[123,11,168,9,"colorToRgba"],[123,22,168,0],[123,23,168,21,"input"],[123,28,168,0],[123,30,168,44],[124,0,169,2],[124,8,169,6,"int32Color"],[124,18,169,16],[124,21,169,19,"normalizeColor"],[124,35,169,33],[124,36,169,34,"input"],[124,41,169,33],[124,42,169,2],[126,0,170,2],[126,8,170,6,"int32Color"],[126,18,170,16],[126,23,170,21],[126,27,170,2],[126,29,170,27],[127,0,171,4],[127,13,171,11,"input"],[127,18,171,4],[128,0,172,3],[130,0,174,2,"int32Color"],[130,4,174,2,"int32Color"],[130,14,174,12],[130,17,174,15,"int32Color"],[130,27,174,25],[130,31,174,29],[130,32,174,2],[131,0,176,2],[131,8,176,8,"r"],[131,9,176,9],[131,12,176,12],[131,13,176,13,"int32Color"],[131,23,176,23],[131,26,176,26],[131,36,176,12],[131,42,176,42],[131,44,176,2],[132,0,177,2],[132,8,177,8,"g"],[132,9,177,9],[132,12,177,12],[132,13,177,13,"int32Color"],[132,23,177,23],[132,26,177,26],[132,36,177,12],[132,42,177,42],[132,44,177,2],[133,0,178,2],[133,8,178,8,"b"],[133,9,178,9],[133,12,178,12],[133,13,178,13,"int32Color"],[133,23,178,23],[133,26,178,26],[133,36,178,12],[133,42,178,42],[133,43,178,2],[134,0,179,2],[134,8,179,8,"a"],[134,9,179,9],[134,12,179,12],[134,13,179,13,"int32Color"],[134,23,179,23],[134,26,179,26],[134,36,179,12],[134,40,179,40],[134,43,179,2],[135,0,181,2],[135,21,181,17,"r"],[135,22,181,2],[135,32,181,23,"g"],[135,33,181,2],[135,43,181,29,"b"],[135,44,181,2],[135,54,181,35,"a"],[135,55,181,2],[136,0,182,1],[138,0,184,0],[138,6,184,6,"stringShapeRegex"],[138,22,184,22],[138,25,184,25],[138,37,184,0],[140,0,194,0],[140,11,194,9,"createInterpolationFromStringOutputRange"],[140,51,194,0],[140,52,195,2,"config"],[140,58,194,0],[140,60,196,29],[141,0,197,2],[141,8,197,6,"outputRange"],[141,19,197,32],[141,22,197,36,"config"],[141,28,197,42],[141,29,197,43,"outputRange"],[141,40,197,2],[142,0,198,2,"invariant"],[142,4,198,2,"invariant"],[142,13,198,11],[142,14,198,12,"outputRange"],[142,25,198,23],[142,26,198,24,"length"],[142,32,198,12],[142,36,198,34],[142,37,198,11],[142,39,198,37],[142,57,198,11],[142,58,198,2],[143,0,199,2,"outputRange"],[143,4,199,2,"outputRange"],[143,15,199,13],[143,18,199,16,"outputRange"],[143,29,199,27],[143,30,199,28,"map"],[143,33,199,16],[143,34,199,32,"colorToRgba"],[143,45,199,16],[143,46,199,2],[144,0,200,2,"checkPattern"],[144,4,200,2,"checkPattern"],[144,16,200,14],[144,17,200,15,"outputRange"],[144,28,200,14],[144,29,200,2],[145,0,213,2],[145,8,213,8,"outputRanges"],[145,20,213,20],[145,23,213,23,"outputRange"],[145,34,213,34],[145,35,213,35],[145,36,213,34],[145,37,213,23],[145,38,213,38,"match"],[145,43,213,23],[145,44,213,44,"stringShapeRegex"],[145,60,213,23],[145,62,213,62,"map"],[145,65,213,23],[145,66,213,66],[146,0,213,66],[146,13,213,72],[146,15,213,66],[147,0,213,66],[147,5,213,23],[147,6,213,2],[148,0,214,2,"outputRange"],[148,4,214,2,"outputRange"],[148,15,214,13],[148,16,214,14,"forEach"],[148,23,214,2],[148,24,214,22],[148,34,214,22,"value"],[148,39,214,27],[148,41,214,31],[149,0,218,4,"value"],[149,6,218,4,"value"],[149,11,218,9],[149,12,218,10,"match"],[149,17,218,4],[149,18,218,16,"stringShapeRegex"],[149,34,218,4],[149,36,218,34,"forEach"],[149,43,218,4],[149,44,218,42],[149,54,218,43,"number"],[149,60,218,42],[149,62,218,51,"i"],[149,63,218,42],[149,65,218,57],[150,0,219,6,"outputRanges"],[150,8,219,6,"outputRanges"],[150,20,219,18],[150,21,219,19,"i"],[150,22,219,18],[150,23,219,6],[150,24,219,22,"push"],[150,28,219,6],[150,29,219,27],[150,30,219,28,"number"],[150,36,219,6],[151,0,220,5],[151,7,218,4],[152,0,221,3],[152,5,214,2],[153,0,226,2],[153,8,226,8,"interpolations"],[153,22,226,22],[153,25,226,25,"outputRange"],[153,36,226,36],[153,37,226,37],[153,38,226,36],[153,39,226,25],[153,40,227,5,"match"],[153,45,226,25],[153,46,227,11,"stringShapeRegex"],[153,62,226,25],[153,64,228,5,"map"],[153,67,226,25],[153,68,228,9],[153,78,228,10,"value"],[153,83,228,9],[153,85,228,17,"i"],[153,86,228,9],[153,88,228,23],[154,0,229,6],[154,13,229,13,"createInterpolation"],[154,32,229,32],[154,51,230,11,"config"],[154,57,229,32],[155,0,231,8,"outputRange"],[155,8,231,8,"outputRange"],[155,19,231,19],[155,21,231,21,"outputRanges"],[155,33,231,33],[155,34,231,34,"i"],[155,35,231,33],[156,0,229,32],[156,9,229,6],[157,0,233,5],[157,5,226,25],[157,6,226,2],[158,0,237,2],[158,8,237,8,"shouldRound"],[158,19,237,19],[158,22,237,22,"isRgbOrRgba"],[158,33,237,33],[158,34,237,34,"outputRange"],[158,45,237,45],[158,46,237,46],[158,47,237,45],[158,48,237,33],[158,49,237,2],[159,0,239,2],[159,11,239,9],[159,21,239,9,"input"],[159,26,239,14],[159,28,239,18],[160,0,240,4],[160,10,240,8,"i"],[160,11,240,9],[160,14,240,12],[160,15,240,4],[161,0,244,4],[161,13,244,11,"outputRange"],[161,24,244,22],[161,25,244,23],[161,26,244,22],[161,27,244,11],[161,28,244,26,"replace"],[161,35,244,11],[161,36,244,34,"stringShapeRegex"],[161,52,244,11],[161,54,244,52],[161,66,244,58],[162,0,245,6],[162,12,245,12,"val"],[162,15,245,15],[162,18,245,18],[162,19,245,19,"interpolations"],[162,33,245,33],[162,34,245,34,"i"],[162,35,245,35],[162,37,245,33],[162,38,245,19],[162,39,245,39,"input"],[162,44,245,19],[162,45,245,6],[163,0,246,6],[163,12,246,12,"rounded"],[163,19,246,19],[163,22,247,8,"shouldRound"],[163,33,247,19],[163,37,247,23,"i"],[163,38,247,24],[163,41,247,27],[163,42,247,8],[163,45,247,31,"Math"],[163,49,247,35],[163,50,247,36,"round"],[163,55,247,31],[163,56,247,42,"val"],[163,59,247,31],[163,60,247,8],[163,63,247,49,"Math"],[163,67,247,53],[163,68,247,54,"round"],[163,73,247,49],[163,74,247,60,"val"],[163,77,247,63],[163,80,247,66],[163,84,247,49],[163,88,247,74],[163,92,246,6],[164,0,248,6],[164,15,248,13,"String"],[164,21,248,19],[164,22,248,20,"rounded"],[164,29,248,19],[164,30,248,6],[165,0,249,5],[165,7,244,11],[165,8,244,4],[166,0,250,3],[166,5,239,2],[167,0,251,1],[169,0,253,0],[169,11,253,9,"isRgbOrRgba"],[169,22,253,0],[169,23,253,21,"range"],[169,28,253,0],[169,30,253,28],[170,0,254,2],[170,11,254,9],[170,18,254,16,"range"],[170,23,254,9],[170,28,254,26],[170,36,254,9],[170,40,254,38,"range"],[170,45,254,43],[170,46,254,44,"startsWith"],[170,56,254,38],[170,57,254,55],[170,62,254,38],[170,63,254,2],[171,0,255,1],[173,0,257,0],[173,11,257,9,"checkPattern"],[173,23,257,0],[173,24,257,22,"arr"],[173,27,257,0],[173,29,257,42],[174,0,258,2],[174,8,258,8,"pattern"],[174,15,258,15],[174,18,258,18,"arr"],[174,21,258,21],[174,22,258,22],[174,23,258,21],[174,24,258,18],[174,25,258,25,"replace"],[174,32,258,18],[174,33,258,33,"stringShapeRegex"],[174,49,258,18],[174,51,258,51],[174,53,258,18],[174,54,258,2],[176,0,259,2],[176,9,259,7],[176,13,259,11,"i"],[176,14,259,12],[176,17,259,15],[176,18,259,2],[176,20,259,18,"i"],[176,21,259,19],[176,24,259,22,"arr"],[176,27,259,25],[176,28,259,26,"length"],[176,34,259,2],[176,36,259,34],[176,38,259,36,"i"],[176,39,259,2],[176,41,259,39],[177,0,260,4,"invariant"],[177,6,260,4,"invariant"],[177,15,260,13],[177,16,261,6,"pattern"],[177,23,261,13],[177,28,261,18,"arr"],[177,31,261,21],[177,32,261,22,"i"],[177,33,261,21],[177,34,261,18],[177,35,261,25,"replace"],[177,42,261,18],[177,43,261,33,"stringShapeRegex"],[177,59,261,18],[177,61,261,51],[177,63,261,18],[177,64,260,13],[177,66,262,6],[177,87,262,27,"arr"],[177,90,262,30],[177,91,262,31],[177,92,262,30],[177,93,262,6],[177,96,262,36],[177,103,262,6],[177,106,262,46,"arr"],[177,109,262,49],[177,110,262,50,"i"],[177,111,262,49],[177,112,260,13],[177,113,260,4],[178,0,264,3],[179,0,265,1],[181,0,267,0],[181,11,267,9,"findRange"],[181,20,267,0],[181,21,267,19,"input"],[181,26,267,0],[181,28,267,34,"inputRange"],[181,38,267,0],[181,40,267,61],[182,0,268,2],[182,8,268,6,"i"],[182,9,268,2],[184,0,269,2],[184,9,269,7,"i"],[184,10,269,8],[184,13,269,11],[184,14,269,2],[184,16,269,14,"i"],[184,17,269,15],[184,20,269,18,"inputRange"],[184,30,269,28],[184,31,269,29,"length"],[184,37,269,18],[184,40,269,38],[184,41,269,2],[184,43,269,41],[184,45,269,43,"i"],[184,46,269,2],[184,48,269,46],[185,0,270,4],[185,10,270,8,"inputRange"],[185,20,270,18],[185,21,270,19,"i"],[185,22,270,18],[185,23,270,8],[185,27,270,25,"input"],[185,32,270,4],[185,34,270,32],[186,0,271,6],[187,0,272,5],[188,0,273,3],[190,0,274,2],[190,11,274,9,"i"],[190,12,274,10],[190,15,274,13],[190,16,274,2],[191,0,275,1],[193,0,277,0],[193,11,277,9,"checkValidInputRange"],[193,31,277,0],[193,32,277,30,"arr"],[193,35,277,0],[193,37,277,50],[194,0,278,2,"invariant"],[194,4,278,2,"invariant"],[194,13,278,11],[194,14,278,12,"arr"],[194,17,278,15],[194,18,278,16,"length"],[194,24,278,12],[194,28,278,26],[194,29,278,11],[194,31,278,29],[194,73,278,11],[194,74,278,2],[196,0,279,2],[196,9,279,7],[196,13,279,11,"i"],[196,14,279,12],[196,17,279,15],[196,18,279,2],[196,20,279,18,"i"],[196,21,279,19],[196,24,279,22,"arr"],[196,27,279,25],[196,28,279,26,"length"],[196,34,279,2],[196,36,279,34],[196,38,279,36,"i"],[196,39,279,2],[196,41,279,39],[197,0,280,4,"invariant"],[197,6,280,4,"invariant"],[197,15,280,13],[197,16,281,6,"arr"],[197,19,281,9],[197,20,281,10,"i"],[197,21,281,9],[197,22,281,6],[197,26,281,16,"arr"],[197,29,281,19],[197,30,281,20,"i"],[197,31,281,21],[197,34,281,24],[197,35,281,19],[197,36,280,13],[197,38,288,6],[197,91,288,59,"arr"],[197,94,280,13],[197,95,280,4],[198,0,290,3],[199,0,291,1],[201,0,293,0],[201,11,293,9,"checkInfiniteRange"],[201,29,293,0],[201,30,293,28,"name"],[201,34,293,0],[201,36,293,42,"arr"],[201,39,293,0],[201,41,293,62],[202,0,294,2,"invariant"],[202,4,294,2,"invariant"],[202,13,294,11],[202,14,294,12,"arr"],[202,17,294,15],[202,18,294,16,"length"],[202,24,294,12],[202,28,294,26],[202,29,294,11],[202,31,294,29,"name"],[202,35,294,33],[202,38,294,36],[202,70,294,11],[202,71,294,2],[203,0,295,2,"invariant"],[203,4,295,2,"invariant"],[203,13,295,11],[203,14,296,4,"arr"],[203,17,296,7],[203,18,296,8,"length"],[203,24,296,4],[203,29,296,19],[203,30,296,4],[203,34,296,24,"arr"],[203,37,296,27],[203,38,296,28],[203,39,296,27],[203,40,296,24],[203,45,296,35],[203,46,296,36,"Infinity"],[203,54,296,4],[203,58,296,48,"arr"],[203,61,296,51],[203,62,296,52],[203,63,296,51],[203,64,296,48],[203,69,296,59,"Infinity"],[203,77,295,11],[203,79,303,4,"name"],[203,83,303,8],[203,86,303,11],[203,120,303,4],[203,123,303,48,"arr"],[203,126,295,11],[203,127,295,2],[204,0,305,1],[206,6,307,6,"AnimatedInterpolation"],[206,27],[209,0,315,2],[209,35,315,14,"parent"],[209,41,315,2],[209,43,315,36,"config"],[209,49,315,2],[209,51,315,69],[210,0,315,69],[212,0,315,69],[214,0,316,4],[215,0,317,4],[215,12,317,9,"_parent"],[215,19,317,4],[215,22,317,19,"parent"],[215,28,317,4],[216,0,318,4],[216,12,318,9,"_config"],[216,19,318,4],[216,22,318,19,"config"],[216,28,318,4],[217,0,319,4],[217,12,319,9,"_interpolation"],[217,26,319,4],[217,29,319,26,"createInterpolation"],[217,48,319,45],[217,49,319,46,"config"],[217,55,319,45],[217,56,319,4],[218,0,315,69],[219,0,320,3],[223,37,322,17],[224,0,323,4],[224,13,323,9,"_parent"],[224,20,323,4],[224,21,323,17,"__makeNative"],[224,33,323,4],[226,0,324,4],[227,0,325,3],[230,35,327,32],[231,0,328,4],[231,12,328,10,"parentValue"],[231,23,328,29],[231,26,328,32],[231,31,328,37,"_parent"],[231,38,328,32],[231,39,328,45,"__getValue"],[231,49,328,32],[231,51,328,4],[233,0,329,4,"invariant"],[233,8,329,4,"invariant"],[233,17,329,13],[233,18,330,6],[233,25,330,13,"parentValue"],[233,36,330,6],[233,41,330,29],[233,49,329,13],[233,51,331,6],[233,103,329,13],[233,104,329,4],[234,0,333,4],[234,15,333,11],[234,20,333,16,"_interpolation"],[234,34,333,11],[234,35,333,31,"parentValue"],[234,46,333,11],[234,47,333,4],[235,0,334,3],[238,34,336,14,"config"],[238,40],[238,42,336,70],[239,0,337,4],[239,15,337,11],[239,19,337,15,"AnimatedInterpolation"],[239,40,337,11],[239,41,337,37],[239,45,337,11],[239,47,337,43,"config"],[239,53,337,11],[239,54,337,4],[240,0,338,3],[243,33,340,19],[244,0,341,4],[244,13,341,9,"_parent"],[244,20,341,4],[244,21,341,17,"__addChild"],[244,31,341,4],[244,32,341,28],[244,36,341,4],[245,0,342,3],[248,33,344,19],[249,0,345,4],[249,13,345,9,"_parent"],[249,20,345,4],[249,21,345,17,"__removeChild"],[249,34,345,4],[249,35,345,31],[249,39,345,4],[251,0,346,4],[252,0,347,3],[255,42,349,22,"range"],[255,47],[255,49,349,41],[256,0,350,4],[256,15,350,11,"range"],[256,20,350,16],[256,21,350,17,"map"],[256,24,350,11],[256,25,350,21,"NativeAnimatedHelper"],[256,45,350,41],[256,46,350,42,"transformDataType"],[256,63,350,11],[256,64,350,4],[257,0,351,3],[260,42,353,27],[261,0,354,4],[261,12,354,8,"__DEV__"],[261,19,354,4],[261,21,354,17],[262,0,355,6,"NativeAnimatedHelper"],[262,10,355,6,"NativeAnimatedHelper"],[262,30,355,26],[262,31,355,27,"validateInterpolation"],[262,52,355,6],[262,53,355,49],[262,58,355,54,"_config"],[262,65,355,6],[263,0,356,5],[265,0,358,4],[265,15,358,11],[266,0,359,6,"inputRange"],[266,10,359,6,"inputRange"],[266,20,359,16],[266,22,359,18],[266,27,359,23,"_config"],[266,34,359,18],[266,35,359,31,"inputRange"],[266,45,358,11],[267,0,361,6,"outputRange"],[267,10,361,6,"outputRange"],[267,21,361,17],[267,23,361,19],[267,28,361,24,"__transformDataType"],[267,47,361,19],[267,48,361,44],[267,53,361,49,"_config"],[267,60,361,44],[267,61,361,57,"outputRange"],[267,72,361,19],[267,73,358,11],[268,0,362,6,"extrapolateLeft"],[268,10,362,6,"extrapolateLeft"],[268,25,362,21],[268,27,363,8],[268,32,363,13,"_config"],[268,39,363,8],[268,40,363,21,"extrapolateLeft"],[268,55,363,8],[268,59,363,40],[268,64,363,45,"_config"],[268,71,363,40],[268,72,363,53,"extrapolate"],[268,83,363,8],[268,87,363,68],[268,95,358,11],[269,0,364,6,"extrapolateRight"],[269,10,364,6,"extrapolateRight"],[269,26,364,22],[269,28,365,8],[269,33,365,13,"_config"],[269,40,365,8],[269,41,365,21,"extrapolateRight"],[269,57,365,8],[269,61,365,41],[269,66,365,46,"_config"],[269,73,365,41],[269,74,365,54,"extrapolate"],[269,85,365,8],[269,89,365,69],[269,97,358,11],[270,0,366,6,"type"],[270,10,366,6,"type"],[270,14,366,10],[270,16,366,12],[271,0,358,11],[271,9,358,4],[272,0,368,3],[276,4,307,36,"AnimatedWithChildren"],[276,24],[278,0,307,6,"AnimatedInterpolation"],[278,2,307,6,"AnimatedInterpolation"],[278,23],[278,24,309,9,"__createInterpolation"],[278,45],[278,48,309,33,"createInterpolation"],[278,67],[279,0,371,0,"module"],[279,2,371,0,"module"],[279,8,371,6],[279,9,371,7,"exports"],[279,16,371,0],[279,19,371,17,"AnimatedInterpolation"],[279,40,371,0]]},"type":"js/module"}]}