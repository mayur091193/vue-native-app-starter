{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"../val","data":{"isAsync":false}},{"name":"./AnimatedNode","data":{"isAsync":false}},{"name":"fbjs/lib/invariant","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/getPrototypeOf\"));\n\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/inherits\"));\n\n  var _val = _$$_REQUIRE(_dependencyMap[6], \"../val\");\n\n  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./AnimatedNode\"));\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"fbjs/lib/invariant\"));\n\n  var NEWTON_ITERATIONS = 4;\n  var NEWTON_MIN_SLOPE = 0.001;\n  var SUBDIVISION_PRECISION = 0.0000001;\n  var SUBDIVISION_MAX_ITERATIONS = 10;\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n  var float32ArraySupported = typeof Float32Array === 'function';\n\n  function A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n\n  function B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n\n  function C(aA1) {\n    return 3.0 * aA1;\n  }\n\n  function calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  function getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX = 0;\n    var currentT = 0;\n    var i = 0;\n\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n    return currentT;\n  }\n\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n\n    return aGuessT;\n  }\n\n  function bezier(mX1, mY1, mX2, mY2) {\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n    if (mX1 !== mY1 || mX2 !== mY2) {\n      for (var i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n      }\n    }\n\n    function getTForX(aX) {\n      var intervalStart = 0.0;\n      var currentSample = 1;\n      var lastSample = kSplineTableSize - 1;\n\n      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n        intervalStart += kSampleStepSize;\n      }\n\n      --currentSample;\n      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n      var guessForT = intervalStart + dist * kSampleStepSize;\n      var initialSlope = getSlope(guessForT, mX1, mX2);\n\n      if (initialSlope >= NEWTON_MIN_SLOPE) {\n        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n      } else if (initialSlope === 0.0) {\n        return guessForT;\n      } else {\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n      }\n    }\n\n    return function BezierEasing(x) {\n      if (mX1 === mY1 && mX2 === mY2) {\n        return x;\n      }\n\n      if (x === 0) {\n        return 0;\n      }\n\n      if (x === 1) {\n        return 1;\n      }\n\n      return calcBezier(getTForX(x), mY1, mY2);\n    };\n  }\n\n  var AnimatedBezier = function (_AnimatedNode) {\n    (0, _inherits2.default)(AnimatedBezier, _AnimatedNode);\n\n    function AnimatedBezier(value, mX1, mY1, mX2, mY2) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, AnimatedBezier);\n      (0, _invariant.default)(value instanceof _AnimatedNode2.default, \"Reanimated: Bezier node argument should be of type AnimatedNode but got \" + value);\n      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedBezier).call(this, {\n        type: 'bezier',\n        mX1: mX1,\n        mY1: mY1,\n        mX2: mX2,\n        mY2: mY2,\n        input: value\n      }, [value]));\n      _this._value = value;\n      _this._bezier = bezier(mX1, mY1, mX2, mY2);\n      return _this;\n    }\n\n    (0, _createClass2.default)(AnimatedBezier, [{\n      key: \"toString\",\n      value: function toString() {\n        return \"AnimatedBezier, id: \" + this.__nodeID;\n      }\n    }, {\n      key: \"__onEvaluate\",\n      value: function __onEvaluate() {\n        return this._bezier((0, _val.val)(this._value));\n      }\n    }]);\n    return AnimatedBezier;\n  }(_AnimatedNode2.default);\n\n  exports.default = AnimatedBezier;\n});","map":[[19,0,1,0],[21,0,2,0],[23,0,3,0],[25,0,6,0],[25,6,6,4,"NEWTON_ITERATIONS"],[25,23,6,21],[25,26,6,24],[25,27,6,0],[26,0,7,0],[26,6,7,4,"NEWTON_MIN_SLOPE"],[26,22,7,20],[26,25,7,23],[26,30,7,0],[27,0,8,0],[27,6,8,4,"SUBDIVISION_PRECISION"],[27,27,8,25],[27,30,8,28],[27,39,8,0],[28,0,9,0],[28,6,9,4,"SUBDIVISION_MAX_ITERATIONS"],[28,32,9,30],[28,35,9,33],[28,37,9,0],[29,0,11,0],[29,6,11,4,"kSplineTableSize"],[29,22,11,20],[29,25,11,23],[29,27,11,0],[30,0,12,0],[30,6,12,4,"kSampleStepSize"],[30,21,12,19],[30,24,12,22],[30,31,12,29,"kSplineTableSize"],[30,47,12,45],[30,50,12,48],[30,53,12,22],[30,54,12,0],[31,0,14,0],[31,6,14,4,"float32ArraySupported"],[31,27,14,25],[31,30,14,28],[31,37,14,35,"Float32Array"],[31,49,14,28],[31,54,14,52],[31,64,14,0],[33,0,16,0],[33,11,16,9,"A"],[33,12,16,0],[33,13,16,11,"aA1"],[33,16,16,0],[33,18,16,16,"aA2"],[33,21,16,0],[33,23,16,21],[34,0,17,2],[34,11,17,9],[34,17,17,15],[34,23,17,21,"aA2"],[34,26,17,9],[34,29,17,27],[34,35,17,33,"aA1"],[34,38,17,2],[35,0,18,1],[37,0,19,0],[37,11,19,9,"B"],[37,12,19,0],[37,13,19,11,"aA1"],[37,16,19,0],[37,18,19,16,"aA2"],[37,21,19,0],[37,23,19,21],[38,0,20,2],[38,11,20,9],[38,17,20,15,"aA2"],[38,20,20,9],[38,23,20,21],[38,29,20,27,"aA1"],[38,32,20,2],[39,0,21,1],[41,0,22,0],[41,11,22,9,"C"],[41,12,22,0],[41,13,22,11,"aA1"],[41,16,22,0],[41,18,22,16],[42,0,23,2],[42,11,23,9],[42,17,23,15,"aA1"],[42,20,23,2],[43,0,24,1],[45,0,27,0],[45,11,27,9,"calcBezier"],[45,21,27,0],[45,22,27,20,"aT"],[45,24,27,0],[45,26,27,24,"aA1"],[45,29,27,0],[45,31,27,29,"aA2"],[45,34,27,0],[45,36,27,34],[46,0,28,2],[46,11,28,9],[46,12,28,10],[46,13,28,11,"A"],[46,14,28,12],[46,15,28,13,"aA1"],[46,18,28,12],[46,20,28,18,"aA2"],[46,23,28,12],[46,24,28,11],[46,27,28,25,"aT"],[46,29,28,11],[46,32,28,30,"B"],[46,33,28,31],[46,34,28,32,"aA1"],[46,37,28,31],[46,39,28,37,"aA2"],[46,42,28,31],[46,43,28,10],[46,47,28,45,"aT"],[46,49,28,10],[46,52,28,50,"C"],[46,53,28,51],[46,54,28,52,"aA1"],[46,57,28,51],[46,58,28,9],[46,62,28,60,"aT"],[46,64,28,2],[47,0,29,1],[49,0,32,0],[49,11,32,9,"getSlope"],[49,19,32,0],[49,20,32,18,"aT"],[49,22,32,0],[49,24,32,22,"aA1"],[49,27,32,0],[49,29,32,27,"aA2"],[49,32,32,0],[49,34,32,32],[50,0,33,2],[50,11,33,9],[50,17,33,15,"A"],[50,18,33,16],[50,19,33,17,"aA1"],[50,22,33,16],[50,24,33,22,"aA2"],[50,27,33,16],[50,28,33,9],[50,31,33,29,"aT"],[50,33,33,9],[50,36,33,34,"aT"],[50,38,33,9],[50,41,33,39],[50,47,33,45,"B"],[50,48,33,46],[50,49,33,47,"aA1"],[50,52,33,46],[50,54,33,52,"aA2"],[50,57,33,46],[50,58,33,39],[50,61,33,59,"aT"],[50,63,33,9],[50,66,33,64,"C"],[50,67,33,65],[50,68,33,66,"aA1"],[50,71,33,65],[50,72,33,2],[51,0,34,1],[53,0,36,0],[53,11,36,9,"binarySubdivide"],[53,26,36,0],[53,27,36,25,"aX"],[53,29,36,0],[53,31,36,29,"aA"],[53,33,36,0],[53,35,36,33,"aB"],[53,37,36,0],[53,39,36,37,"mX1"],[53,42,36,0],[53,44,36,42,"mX2"],[53,47,36,0],[53,49,36,47],[54,0,37,2],[54,8,37,6,"currentX"],[54,16,37,14],[54,19,37,17],[54,20,37,2],[55,0,38,2],[55,8,38,6,"currentT"],[55,16,38,14],[55,19,38,17],[55,20,38,2],[56,0,39,2],[56,8,39,6,"i"],[56,9,39,7],[56,12,39,10],[56,13,39,2],[58,0,40,2],[58,7,40,5],[59,0,41,4,"currentT"],[59,6,41,4,"currentT"],[59,14,41,12],[59,17,41,15,"aA"],[59,19,41,17],[59,22,41,20],[59,23,41,21,"aB"],[59,25,41,23],[59,28,41,26,"aA"],[59,30,41,20],[59,34,41,32],[59,37,41,4],[60,0,42,4,"currentX"],[60,6,42,4,"currentX"],[60,14,42,12],[60,17,42,15,"calcBezier"],[60,27,42,25],[60,28,42,26,"currentT"],[60,36,42,25],[60,38,42,36,"mX1"],[60,41,42,25],[60,43,42,41,"mX2"],[60,46,42,25],[60,47,42,15],[60,50,42,48,"aX"],[60,52,42,4],[62,0,43,4],[62,10,43,8,"currentX"],[62,18,43,16],[62,21,43,19],[62,24,43,4],[62,26,43,24],[63,0,44,6,"aB"],[63,8,44,6,"aB"],[63,10,44,8],[63,13,44,11,"currentT"],[63,21,44,6],[64,0,45,5],[64,7,43,4],[64,13,45,11],[65,0,46,6,"aA"],[65,8,46,6,"aA"],[65,10,46,8],[65,13,46,11,"currentT"],[65,21,46,6],[66,0,47,5],[67,0,48,3],[67,5,40,2],[67,13,49,4,"Math"],[67,17,49,8],[67,18,49,9,"abs"],[67,21,49,4],[67,22,49,13,"currentX"],[67,30,49,4],[67,34,49,25,"SUBDIVISION_PRECISION"],[67,55,49,4],[67,59,50,4],[67,61,50,6,"i"],[67,62,50,4],[67,65,50,10,"SUBDIVISION_MAX_ITERATIONS"],[67,91,40,2],[69,0,52,2],[69,11,52,9,"currentT"],[69,19,52,2],[70,0,53,1],[72,0,55,0],[72,11,55,9,"newtonRaphsonIterate"],[72,31,55,0],[72,32,55,30,"aX"],[72,34,55,0],[72,36,55,34,"aGuessT"],[72,43,55,0],[72,45,55,43,"mX1"],[72,48,55,0],[72,50,55,48,"mX2"],[72,53,55,0],[72,55,55,53],[73,0,56,2],[73,9,56,7],[73,13,56,11,"i"],[73,14,56,12],[73,17,56,15],[73,18,56,2],[73,20,56,18,"i"],[73,21,56,19],[73,24,56,22,"NEWTON_ITERATIONS"],[73,41,56,2],[73,43,56,41],[73,45,56,43,"i"],[73,46,56,2],[73,48,56,46],[74,0,57,4],[74,10,57,8,"currentSlope"],[74,22,57,20],[74,25,57,23,"getSlope"],[74,33,57,31],[74,34,57,32,"aGuessT"],[74,41,57,31],[74,43,57,41,"mX1"],[74,46,57,31],[74,48,57,46,"mX2"],[74,51,57,31],[74,52,57,4],[76,0,58,4],[76,10,58,8,"currentSlope"],[76,22,58,20],[76,27,58,25],[76,30,58,4],[76,32,58,30],[77,0,59,6],[77,15,59,13,"aGuessT"],[77,22,59,6],[78,0,60,5],[80,0,61,4],[80,10,61,8,"currentX"],[80,18,61,16],[80,21,61,19,"calcBezier"],[80,31,61,29],[80,32,61,30,"aGuessT"],[80,39,61,29],[80,41,61,39,"mX1"],[80,44,61,29],[80,46,61,44,"mX2"],[80,49,61,29],[80,50,61,19],[80,53,61,51,"aX"],[80,55,61,4],[81,0,62,4,"aGuessT"],[81,6,62,4,"aGuessT"],[81,13,62,11],[81,17,62,15,"currentX"],[81,25,62,23],[81,28,62,26,"currentSlope"],[81,40,62,4],[82,0,63,3],[84,0,64,2],[84,11,64,9,"aGuessT"],[84,18,64,2],[85,0,65,1],[87,0,67,0],[87,11,67,9,"bezier"],[87,17,67,0],[87,18,67,16,"mX1"],[87,21,67,0],[87,23,67,21,"mY1"],[87,26,67,0],[87,28,67,26,"mX2"],[87,31,67,0],[87,33,67,31,"mY2"],[87,36,67,0],[87,38,67,36],[88,0,69,2],[88,8,69,6,"sampleValues"],[88,20,69,18],[88,23,69,21,"float32ArraySupported"],[88,44,69,42],[88,47,70,6],[88,51,70,10,"Float32Array"],[88,63,70,6],[88,64,70,23,"kSplineTableSize"],[88,80,70,6],[88,81,69,42],[88,84,71,6],[88,88,71,10,"Array"],[88,93,71,6],[88,94,71,16,"kSplineTableSize"],[88,110,71,6],[88,111,69,2],[90,0,72,2],[90,8,72,6,"mX1"],[90,11,72,9],[90,16,72,14,"mY1"],[90,19,72,6],[90,23,72,21,"mX2"],[90,26,72,24],[90,31,72,29,"mY2"],[90,34,72,2],[90,36,72,34],[91,0,73,4],[91,11,73,9],[91,15,73,13,"i"],[91,16,73,14],[91,19,73,17],[91,20,73,4],[91,22,73,20,"i"],[91,23,73,21],[91,26,73,24,"kSplineTableSize"],[91,42,73,4],[91,44,73,42],[91,46,73,44,"i"],[91,47,73,4],[91,49,73,47],[92,0,74,6,"sampleValues"],[92,8,74,6,"sampleValues"],[92,20,74,18],[92,21,74,19,"i"],[92,22,74,18],[92,23,74,6],[92,26,74,24,"calcBezier"],[92,36,74,34],[92,37,74,35,"i"],[92,38,74,36],[92,41,74,39,"kSampleStepSize"],[92,56,74,34],[92,58,74,56,"mX1"],[92,61,74,34],[92,63,74,61,"mX2"],[92,66,74,34],[92,67,74,6],[93,0,75,5],[94,0,76,3],[96,0,78,2],[96,13,78,11,"getTForX"],[96,21,78,2],[96,22,78,20,"aX"],[96,24,78,2],[96,26,78,24],[97,0,79,4],[97,10,79,8,"intervalStart"],[97,23,79,21],[97,26,79,24],[97,29,79,4],[98,0,80,4],[98,10,80,8,"currentSample"],[98,23,80,21],[98,26,80,24],[98,27,80,4],[99,0,81,4],[99,10,81,8,"lastSample"],[99,20,81,18],[99,23,81,21,"kSplineTableSize"],[99,39,81,37],[99,42,81,40],[99,43,81,4],[101,0,83,4],[101,13,85,6,"currentSample"],[101,26,85,19],[101,31,85,24,"lastSample"],[101,41,85,6],[101,45,85,38,"sampleValues"],[101,57,85,50],[101,58,85,51,"currentSample"],[101,71,85,50],[101,72,85,38],[101,76,85,69,"aX"],[101,78,83,4],[101,80,86,6],[101,82,86,8,"currentSample"],[101,95,83,4],[101,97,87,6],[102,0,88,6,"intervalStart"],[102,8,88,6,"intervalStart"],[102,21,88,19],[102,25,88,23,"kSampleStepSize"],[102,40,88,6],[103,0,89,5],[105,0,90,4],[105,8,90,6,"currentSample"],[105,21,90,4],[106,0,93,4],[106,10,93,8,"dist"],[106,14,93,12],[106,17,94,6],[106,18,94,7,"aX"],[106,20,94,9],[106,23,94,12,"sampleValues"],[106,35,94,24],[106,36,94,25,"currentSample"],[106,49,94,24],[106,50,94,6],[106,55,95,7,"sampleValues"],[106,67,95,19],[106,68,95,20,"currentSample"],[106,81,95,33],[106,84,95,36],[106,85,95,19],[106,86,95,7],[106,89,95,41,"sampleValues"],[106,101,95,53],[106,102,95,54,"currentSample"],[106,115,95,53],[106,116,94,6],[106,117,93,4],[107,0,96,4],[107,10,96,8,"guessForT"],[107,19,96,17],[107,22,96,20,"intervalStart"],[107,35,96,33],[107,38,96,36,"dist"],[107,42,96,40],[107,45,96,43,"kSampleStepSize"],[107,60,96,4],[108,0,98,4],[108,10,98,8,"initialSlope"],[108,22,98,20],[108,25,98,23,"getSlope"],[108,33,98,31],[108,34,98,32,"guessForT"],[108,43,98,31],[108,45,98,43,"mX1"],[108,48,98,31],[108,50,98,48,"mX2"],[108,53,98,31],[108,54,98,4],[110,0,99,4],[110,10,99,8,"initialSlope"],[110,22,99,20],[110,26,99,24,"NEWTON_MIN_SLOPE"],[110,42,99,4],[110,44,99,42],[111,0,100,6],[111,15,100,13,"newtonRaphsonIterate"],[111,35,100,33],[111,36,100,34,"aX"],[111,38,100,33],[111,40,100,38,"guessForT"],[111,49,100,33],[111,51,100,49,"mX1"],[111,54,100,33],[111,56,100,54,"mX2"],[111,59,100,33],[111,60,100,6],[112,0,101,5],[112,7,99,4],[112,13,101,11],[112,17,101,15,"initialSlope"],[112,29,101,27],[112,34,101,32],[112,37,101,11],[112,39,101,37],[113,0,102,6],[113,15,102,13,"guessForT"],[113,24,102,6],[114,0,103,5],[114,7,101,11],[114,13,103,11],[115,0,104,6],[115,15,104,13,"binarySubdivide"],[115,30,104,28],[115,31,105,8,"aX"],[115,33,104,28],[115,35,106,8,"intervalStart"],[115,48,104,28],[115,50,107,8,"intervalStart"],[115,63,107,21],[115,66,107,24,"kSampleStepSize"],[115,81,104,28],[115,83,108,8,"mX1"],[115,86,104,28],[115,88,109,8,"mX2"],[115,91,104,28],[115,92,104,6],[116,0,111,5],[117,0,112,3],[119,0,114,2],[119,11,114,9],[119,20,114,18,"BezierEasing"],[119,32,114,9],[119,33,114,31,"x"],[119,34,114,9],[119,36,114,34],[120,0,115,4],[120,10,115,8,"mX1"],[120,13,115,11],[120,18,115,16,"mY1"],[120,21,115,8],[120,25,115,23,"mX2"],[120,28,115,26],[120,33,115,31,"mY2"],[120,36,115,4],[120,38,115,36],[121,0,116,6],[121,15,116,13,"x"],[121,16,116,6],[122,0,117,5],[124,0,119,4],[124,10,119,8,"x"],[124,11,119,9],[124,16,119,14],[124,17,119,4],[124,19,119,17],[125,0,120,6],[125,15,120,13],[125,16,120,6],[126,0,121,5],[128,0,122,4],[128,10,122,8,"x"],[128,11,122,9],[128,16,122,14],[128,17,122,4],[128,19,122,17],[129,0,123,6],[129,15,123,13],[129,16,123,6],[130,0,124,5],[132,0,125,4],[132,13,125,11,"calcBezier"],[132,23,125,21],[132,24,125,22,"getTForX"],[132,32,125,30],[132,33,125,31,"x"],[132,34,125,30],[132,35,125,21],[132,37,125,35,"mY1"],[132,40,125,21],[132,42,125,40,"mY2"],[132,45,125,21],[132,46,125,4],[133,0,126,3],[133,5,114,2],[134,0,127,1],[136,6,129,21,"AnimatedBezier"],[136,20],[139,0,133,2],[139,28,133,14,"value"],[139,33,133,2],[139,35,133,21,"mX1"],[139,38,133,2],[139,40,133,26,"mY1"],[139,43,133,2],[139,45,133,31,"mX2"],[139,48,133,2],[139,50,133,36,"mY2"],[139,53,133,2],[139,55,133,41],[140,0,133,41],[142,0,133,41],[143,0,134,4],[143,30,135,6,"value"],[143,35,135,11],[143,47,135,23,"AnimatedNode"],[143,69,134,4],[143,148,136,81,"value"],[143,153,134,4],[144,0,138,4],[144,118,138,10],[145,0,138,12,"type"],[145,8,138,12,"type"],[145,12,138,16],[145,14,138,18],[145,22,138,10],[146,0,138,28,"mX1"],[146,8,138,28,"mX1"],[146,11,138,31],[146,13,138,28,"mX1"],[146,16,138,10],[147,0,138,33,"mY1"],[147,8,138,33,"mY1"],[147,11,138,36],[147,13,138,33,"mY1"],[147,16,138,10],[148,0,138,38,"mX2"],[148,8,138,38,"mX2"],[148,11,138,41],[148,13,138,38,"mX2"],[148,16,138,10],[149,0,138,43,"mY2"],[149,8,138,43,"mY2"],[149,11,138,46],[149,13,138,43,"mY2"],[149,16,138,10],[150,0,138,48,"input"],[150,8,138,48,"input"],[150,13,138,53],[150,15,138,55,"value"],[151,0,138,10],[151,7,138,4],[151,9,138,64],[151,10,139,6,"value"],[151,15,138,64],[151,16,138,4],[152,0,141,4],[152,12,141,9,"_value"],[152,18,141,4],[152,21,141,18,"value"],[152,26,141,4],[153,0,142,4],[153,12,142,9,"_bezier"],[153,19,142,4],[153,22,142,19,"bezier"],[153,28,142,25],[153,29,142,26,"mX1"],[153,32,142,25],[153,34,142,31,"mY1"],[153,37,142,25],[153,39,142,36,"mX2"],[153,42,142,25],[153,44,142,41,"mY2"],[153,47,142,25],[153,48,142,4],[154,0,133,41],[155,0,143,3],[159,33,145,13],[160,0,146,4],[160,40,146,34],[160,45,146,39,"__nodeID"],[160,53,146,4],[161,0,147,3],[164,37,149,17],[165,0,150,4],[165,15,150,11],[165,20,150,16,"_bezier"],[165,27,150,11],[165,28,150,24],[165,42,150,28],[165,47,150,33,"_value"],[165,53,150,24],[165,54,150,11],[165,55,150,4],[166,0,151,3],[169,4,129,44,"AnimatedNode"],[169,26]]},"type":"js/module"}]}